
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800200  00001cd6  00001d6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000015fa  008002c0  008002c0  00001e2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005485  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001be6  00000000  00000000  000077b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a46  00000000  00000000  0000939f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b00  00000000  00000000  0000bde8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001926  00000000  00000000  0000c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029d8  00000000  00000000  0000e20e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  00010be6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	45 c2       	rjmp	.+1162   	; 0x4a4 <__vector_6>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	09 c3       	rjmp	.+1554   	; 0x648 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	2e c2       	rjmp	.+1116   	; 0x4c2 <__vector_25>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c2       	rjmp	.+1172   	; 0x526 <__vector_36>
      92:	00 00       	nop
      94:	e8 c2       	rjmp	.+1488   	; 0x666 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	be c2       	rjmp	.+1404   	; 0x626 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e6 ed       	ldi	r30, 0xD6	; 214
     14c:	fc e1       	ldi	r31, 0x1C	; 28
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a0 3c       	cpi	r26, 0xC0	; 192
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	28 e1       	ldi	r18, 0x18	; 24
     160:	a0 ec       	ldi	r26, 0xC0	; 192
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	aa 3b       	cpi	r26, 0xBA	; 186
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	c3 d0       	rcall	.+390    	; 0x2f6 <main>
     170:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <appDataConf>:
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
//appSendData();
//appSendOK(APP_ADDR-1);
appSendTime(APP_ADDR-1);
     176:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <appDataReqBusy>
     17a:	08 95       	ret

0000017c <appDataInd>:
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	08 95       	ret

00000180 <appSendTime>:
     180:	20 91 c2 04 	lds	r18, 0x04C2	; 0x8004c2 <appDataReqBusy>
     184:	21 11       	cpse	r18, r1
     186:	17 c0       	rjmp	.+46     	; 0x1b6 <appSendTime+0x36>
     188:	e3 ec       	ldi	r30, 0xC3	; 195
     18a:	f4 e0       	ldi	r31, 0x04	; 4
     18c:	96 83       	std	Z+6, r25	; 0x06
     18e:	85 83       	std	Z+5, r24	; 0x05
     190:	86 e0       	ldi	r24, 0x06	; 6
     192:	87 83       	std	Z+7, r24	; 0x07
     194:	80 87       	std	Z+8, r24	; 0x08
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	91 87       	std	Z+9, r25	; 0x09
     19a:	2b e8       	ldi	r18, 0x8B	; 139
     19c:	38 e1       	ldi	r19, 0x18	; 24
     19e:	33 87       	std	Z+11, r19	; 0x0b
     1a0:	22 87       	std	Z+10, r18	; 0x0a
     1a2:	84 87       	std	Z+12, r24	; 0x0c
     1a4:	8b eb       	ldi	r24, 0xBB	; 187
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	96 87       	std	Z+14, r25	; 0x0e
     1aa:	85 87       	std	Z+13, r24	; 0x0d
     1ac:	cf 01       	movw	r24, r30
     1ae:	d1 d2       	rcall	.+1442   	; 0x752 <NWK_DataReq>
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <appDataReqBusy>
     1b6:	08 95       	ret

000001b8 <board_init>:
}

/*************************************************************************//**
*****************************************************************************/
void board_init(){
	cli(); //disable interrupts
     1b8:	f8 94       	cli
//	PB1 = LED4
//	PB2 = LED2
//	PB3 = LED3
	//	init LED
	DDRB =	0b00001110;
     1ba:	8e e0       	ldi	r24, 0x0E	; 14
     1bc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00001110;
     1be:	85 b9       	out	0x05, r24	; 5
	//	FIBOCOM RST pin
	DDRE =	0b00000100;
     1c0:	84 e0       	ldi	r24, 0x04	; 4
     1c2:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000100;
     1c4:	8e b9       	out	0x0e, r24	; 14
		
	UART1_init(38400); //baudrate 38400b/s PC
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	96 e9       	ldi	r25, 0x96	; 150
     1ca:	0e 94 67 0d 	call	0x1ace	; 0x1ace <UART1_init>
	UART0_init(9600);  // GPS UART - dle datasheetu
     1ce:	80 e8       	ldi	r24, 0x80	; 128
     1d0:	95 e2       	ldi	r25, 0x25	; 37
     1d2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <UART0_init>
	
	UCSR1B |= (1 << RXCIE1); // UART receive interrupt enable
     1d6:	e9 ec       	ldi	r30, 0xC9	; 201
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	80 68       	ori	r24, 0x80	; 128
     1de:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0); // UART receive interrupt enable
     1e0:	e1 ec       	ldi	r30, 0xC1	; 193
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	80 68       	ori	r24, 0x80	; 128
     1e8:	80 83       	st	Z, r24

	////	INTERRUPT 5 - GPS status	////
	EIMSK |= (1 << INT5);	// zapnout interrupt 5
     1ea:	ed 9a       	sbi	0x1d, 5	; 29
	
	// nabezna i sestupna hrana 	
//	EICRB |= (1 << ISC50);

	//nabezna hrana
	EICRB |= (1 << ISC50);
     1ec:	ea e6       	ldi	r30, 0x6A	; 106
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	84 60       	ori	r24, 0x04	; 4
     1f4:	80 83       	st	Z, r24
	EICRB |= (1 << ISC51);
     1f6:	80 81       	ld	r24, Z
     1f8:	88 60       	ori	r24, 0x08	; 8
     1fa:	80 83       	st	Z, r24
     1fc:	83 e0       	ldi	r24, 0x03	; 3
	uint8_t i = 0;
	while(i < 3){
		_delay_ms(500);
		PORTB = 0b00000000;
		_delay_ms(500);
		PORTB = 0b00001110;
     1fe:	9e e0       	ldi	r25, 0x0E	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     200:	2f ef       	ldi	r18, 0xFF	; 255
     202:	34 e3       	ldi	r19, 0x34	; 52
     204:	4c e0       	ldi	r20, 0x0C	; 12
     206:	21 50       	subi	r18, 0x01	; 1
     208:	30 40       	sbci	r19, 0x00	; 0
     20a:	40 40       	sbci	r20, 0x00	; 0
     20c:	e1 f7       	brne	.-8      	; 0x206 <board_init+0x4e>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <board_init+0x58>
     210:	00 00       	nop
	
	//	BLIK LED
	uint8_t i = 0;
	while(i < 3){
		_delay_ms(500);
		PORTB = 0b00000000;
     212:	15 b8       	out	0x05, r1	; 5
     214:	2f ef       	ldi	r18, 0xFF	; 255
     216:	34 e3       	ldi	r19, 0x34	; 52
     218:	4c e0       	ldi	r20, 0x0C	; 12
     21a:	21 50       	subi	r18, 0x01	; 1
     21c:	30 40       	sbci	r19, 0x00	; 0
     21e:	40 40       	sbci	r20, 0x00	; 0
     220:	e1 f7       	brne	.-8      	; 0x21a <board_init+0x62>
     222:	00 c0       	rjmp	.+0      	; 0x224 <board_init+0x6c>
     224:	00 00       	nop
		_delay_ms(500);
		PORTB = 0b00001110;
     226:	95 b9       	out	0x05, r25	; 5
     228:	81 50       	subi	r24, 0x01	; 1
//	EICRB |= (1 << ISC51);
	
	
	//	BLIK LED
	uint8_t i = 0;
	while(i < 3){
     22a:	51 f7       	brne	.-44     	; 0x200 <board_init+0x48>
		PORTB = 0b00000000;
		_delay_ms(500);
		PORTB = 0b00001110;
		i++;
	}
	sei(); // enable interrupts
     22c:	78 94       	sei
     22e:	08 95       	ret

00000230 <reset_GPS>:
     230:	2f ef       	ldi	r18, 0xFF	; 255
     232:	84 e3       	ldi	r24, 0x34	; 52
     234:	9c e0       	ldi	r25, 0x0C	; 12
     236:	21 50       	subi	r18, 0x01	; 1
     238:	80 40       	sbci	r24, 0x00	; 0
     23a:	90 40       	sbci	r25, 0x00	; 0
     23c:	e1 f7       	brne	.-8      	; 0x236 <reset_GPS+0x6>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <reset_GPS+0x10>
     240:	00 00       	nop
*****************************************************************************/

void reset_GPS(void) {
	//	FIBOCOM 200 ms reset puls
	_delay_ms(500);
	PORTE = 0b00000000;
     242:	1e b8       	out	0x0e, r1	; 14
     244:	2f ef       	ldi	r18, 0xFF	; 255
     246:	81 ee       	ldi	r24, 0xE1	; 225
     248:	94 e0       	ldi	r25, 0x04	; 4
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	80 40       	sbci	r24, 0x00	; 0
     24e:	90 40       	sbci	r25, 0x00	; 0
     250:	e1 f7       	brne	.-8      	; 0x24a <reset_GPS+0x1a>
     252:	00 c0       	rjmp	.+0      	; 0x254 <reset_GPS+0x24>
     254:	00 00       	nop
	_delay_ms(200);
	PORTE = 0b00000100;
     256:	84 e0       	ldi	r24, 0x04	; 4
     258:	8e b9       	out	0x0e, r24	; 14
     25a:	08 95       	ret

0000025c <Parse_GPRMC_Time>:
// $GPRMC,hhmmss.ss,A,llll.ll,a,yyyyy.yy,a,x.x,x.x,ddmmyy,x.x,a*hh

// $GPRMC,123519,A,4807.038,N,01131.000,E,0.022,269.131,230394,,,A,C*6A
// $GPRMC,082100.466,V,,,,,,,040522,,,N*43

uint8_t Parse_GPRMC_Time(char * GPS_buffer, char * hhmmss) {
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	da 95       	dec	r29
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61
     274:	8b 01       	movw	r16, r22
	// GPS_buffer muze byt pozmenen prerusenim z ISR uart0 pocas parsovani - to se nesmi stat,
	// obsah zachycenych sprav je ulozen do parse_buffer, ktery zustane staticky pocas parsovani
	char parse_buffer[256];
	strcpy(parse_buffer, GPS_buffer);
     276:	bc 01       	movw	r22, r24
     278:	ce 01       	movw	r24, r28
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <strcpy>
     280:	fe 01       	movw	r30, r28
     282:	31 96       	adiw	r30, 0x01	; 1
	for (int i = 0; i < 256; i++)
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
	{
		// min 20 znakova rezerva od pocatku GPRMC spravy po konec GPS_bufferu potrebna pro uspesne parsovani casu
		if (i <= 235) {
			//if ( (parse_buffer[i] == '$') && (parse_buffer[i+5] == 'C')	 && (parse_buffer[i+18] == 'A') ) {		// $GPRMC,hhmmss,A
				if ( (parse_buffer[i] == '$') && (parse_buffer[i+5] == 'C') ) {
     288:	21 91       	ld	r18, Z+
     28a:	24 32       	cpi	r18, 0x24	; 36
     28c:	c1 f4       	brne	.+48     	; 0x2be <Parse_GPRMC_Time+0x62>
     28e:	24 81       	ldd	r18, Z+4	; 0x04
     290:	23 34       	cpi	r18, 0x43	; 67
     292:	a9 f4       	brne	.+42     	; 0x2be <Parse_GPRMC_Time+0x62>
				// zapis casoveho useku spravy do pole hhmmcc[], ktere se bude odesilat
				uint8_t j = 0;	// index aktualni cifry casu
				while (j < 6) {
					if ( (parse_buffer[i+7+j] >= '0') && (parse_buffer[i+7+j] <= '9') ) {
     294:	fe 01       	movw	r30, r28
     296:	e8 0f       	add	r30, r24
     298:	f9 1f       	adc	r31, r25
     29a:	20 85       	ldd	r18, Z+8	; 0x08
     29c:	30 ed       	ldi	r19, 0xD0	; 208
     29e:	32 0f       	add	r19, r18
     2a0:	3a 30       	cpi	r19, 0x0A	; 10
     2a2:	a8 f0       	brcs	.+42     	; 0x2ce <Parse_GPRMC_Time+0x72>
						hhmmss[j] = parse_buffer[i+7+j];
						j++;
					}
					else {
						return 0;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	1c c0       	rjmp	.+56     	; 0x2e0 <Parse_GPRMC_Time+0x84>
			//if ( (parse_buffer[i] == '$') && (parse_buffer[i+5] == 'C')	 && (parse_buffer[i+18] == 'A') ) {		// $GPRMC,hhmmss,A
				if ( (parse_buffer[i] == '$') && (parse_buffer[i+5] == 'C') ) {
				// zapis casoveho useku spravy do pole hhmmcc[], ktere se bude odesilat
				uint8_t j = 0;	// index aktualni cifry casu
				while (j < 6) {
					if ( (parse_buffer[i+7+j] >= '0') && (parse_buffer[i+7+j] <= '9') ) {
     2a8:	81 91       	ld	r24, Z+
     2aa:	90 ed       	ldi	r25, 0xD0	; 208
     2ac:	98 0f       	add	r25, r24
     2ae:	9a 30       	cpi	r25, 0x0A	; 10
     2b0:	60 f4       	brcc	.+24     	; 0x2ca <Parse_GPRMC_Time+0x6e>
						hhmmss[j] = parse_buffer[i+7+j];
     2b2:	8d 93       	st	X+, r24
		if (i <= 235) {
			//if ( (parse_buffer[i] == '$') && (parse_buffer[i+5] == 'C')	 && (parse_buffer[i+18] == 'A') ) {		// $GPRMC,hhmmss,A
				if ( (parse_buffer[i] == '$') && (parse_buffer[i+5] == 'C') ) {
				// zapis casoveho useku spravy do pole hhmmcc[], ktere se bude odesilat
				uint8_t j = 0;	// index aktualni cifry casu
				while (j < 6) {
     2b4:	a0 17       	cp	r26, r16
     2b6:	b1 07       	cpc	r27, r17
     2b8:	b9 f7       	brne	.-18     	; 0x2a8 <Parse_GPRMC_Time+0x4c>
					else {
						return 0;
					}
				}
				//aktualni cas byl ulozen, dalsi parsovani v ramci bufferu nema smysl, konec
				return 1;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	11 c0       	rjmp	.+34     	; 0x2e0 <Parse_GPRMC_Time+0x84>
uint8_t Parse_GPRMC_Time(char * GPS_buffer, char * hhmmss) {
	// GPS_buffer muze byt pozmenen prerusenim z ISR uart0 pocas parsovani - to se nesmi stat,
	// obsah zachycenych sprav je ulozen do parse_buffer, ktery zustane staticky pocas parsovani
	char parse_buffer[256];
	strcpy(parse_buffer, GPS_buffer);
	for (int i = 0; i < 256; i++)
     2be:	01 96       	adiw	r24, 0x01	; 1
	{
		// min 20 znakova rezerva od pocatku GPRMC spravy po konec GPS_bufferu potrebna pro uspesne parsovani casu
		if (i <= 235) {
     2c0:	8c 3e       	cpi	r24, 0xEC	; 236
     2c2:	91 05       	cpc	r25, r1
     2c4:	09 f7       	brne	.-62     	; 0x288 <Parse_GPRMC_Time+0x2c>
				//hours[1] = parse_buffer[i+7];
			}
		}
		// pokud i > 235 dalsi parsovani v aktualnim bufferu neni mozne, konec parsovani
		else {
			return 0;
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <Parse_GPRMC_Time+0x84>
					if ( (parse_buffer[i+7+j] >= '0') && (parse_buffer[i+7+j] <= '9') ) {
						hhmmss[j] = parse_buffer[i+7+j];
						j++;
					}
					else {
						return 0;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <Parse_GPRMC_Time+0x84>
				if ( (parse_buffer[i] == '$') && (parse_buffer[i+5] == 'C') ) {
				// zapis casoveho useku spravy do pole hhmmcc[], ktere se bude odesilat
				uint8_t j = 0;	// index aktualni cifry casu
				while (j < 6) {
					if ( (parse_buffer[i+7+j] >= '0') && (parse_buffer[i+7+j] <= '9') ) {
						hhmmss[j] = parse_buffer[i+7+j];
     2ce:	d8 01       	movw	r26, r16
     2d0:	2d 93       	st	X+, r18
     2d2:	8c 0f       	add	r24, r28
     2d4:	9d 1f       	adc	r25, r29
     2d6:	fc 01       	movw	r30, r24
     2d8:	39 96       	adiw	r30, 0x09	; 9
     2da:	0a 5f       	subi	r16, 0xFA	; 250
     2dc:	1f 4f       	sbci	r17, 0xFF	; 255
     2de:	e4 cf       	rjmp	.-56     	; 0x2a8 <Parse_GPRMC_Time+0x4c>
		else {
			return 0;
		}
	}
	return 0;
}
     2e0:	d3 95       	inc	r29
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
SYS_Init();	//vzdy zavolat
     2f6:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <SYS_Init>
			}
			else
			{
				strcpy(send_buffer, "\n\r No GPS signal / Invalid packet\n");
				UART1_SendString(send_buffer);
				appState = APP_STATE_IDLE;
     2fa:	55 24       	eor	r5, r5
     2fc:	53 94       	inc	r5
				strcpy(send_buffer, "\n\rGPRMC packet ok \n\r");
				UART1_SendString(send_buffer);
				strcpy(send_buffer, "\n\rhhmmss: \n\r");
				UART1_SendString(send_buffer);
				UART1_SendString(hhmmss);
				strcpy(send_buffer, "\n\r");
     2fe:	0f 2e       	mov	r0, r31
     300:	fa e0       	ldi	r31, 0x0A	; 10
     302:	8f 2e       	mov	r8, r31
     304:	fd e0       	ldi	r31, 0x0D	; 13
     306:	9f 2e       	mov	r9, r31
     308:	f0 2d       	mov	r31, r0
				appState = APP_STATE_LWM_SEND_TIME;
     30a:	68 94       	set
     30c:	44 24       	eor	r4, r4
     30e:	41 f8       	bld	r4, 1
static void appSendPulse (uint16_t dst)
{
	if (appDataReqBusy)
	return;
	
	appDataReq.dstAddr = dst;
     310:	0f 2e       	mov	r0, r31
     312:	f3 ec       	ldi	r31, 0xC3	; 195
     314:	af 2e       	mov	r10, r31
     316:	f4 e0       	ldi	r31, 0x04	; 4
     318:	bf 2e       	mov	r11, r31
     31a:	f0 2d       	mov	r31, r0
     31c:	cc 24       	eor	r12, r12
     31e:	ca 94       	dec	r12
     320:	dc 2c       	mov	r13, r12
	appDataReq.dstEndpoint = 7;
     322:	0f 2e       	mov	r0, r31
     324:	f7 e0       	ldi	r31, 0x07	; 7
     326:	3f 2e       	mov	r3, r31
     328:	f0 2d       	mov	r31, r0
	appDataReq.srcEndpoint = 7;
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
	appDataReq.data = send_pulse;	
     32a:	0f 2e       	mov	r0, r31
     32c:	f5 e8       	ldi	r31, 0x85	; 133
     32e:	ef 2e       	mov	r14, r31
     330:	f8 e1       	ldi	r31, 0x18	; 24
     332:	ff 2e       	mov	r15, r31
     334:	f0 2d       	mov	r31, r0
	appDataReq.size = 1;
	appDataReq.confirm = appDataConf;
     336:	0f 2e       	mov	r0, r31
     338:	fb eb       	ldi	r31, 0xBB	; 187
     33a:	6f 2e       	mov	r6, r31
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	7f 2e       	mov	r7, r31
     340:	f0 2d       	mov	r31, r0
     342:	cb e0       	ldi	r28, 0x0B	; 11
     344:	d2 e0       	ldi	r29, 0x02	; 2
{
SYS_Init();	//vzdy zavolat

while (1)
{
SYS_TaskHandler();		//obsluha stacku, prijimani a odeslani dat, stack, neresit
     346:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <SYS_TaskHandler>
/*************************************************************************//**
*****************************************************************************/

static void APP_TaskHandler(void)
{
	switch (appState)
     34a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <appState>
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	71 f1       	breq	.+92     	; 0x3ae <main+0xb8>
     352:	20 f0       	brcs	.+8      	; 0x35c <main+0x66>
     354:	82 30       	cpi	r24, 0x02	; 2
     356:	09 f4       	brne	.+2      	; 0x35a <main+0x64>
     358:	97 c0       	rjmp	.+302    	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
     35a:	f5 cf       	rjmp	.-22     	; 0x346 <main+0x50>
}
/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	b5 d1       	rcall	.+874    	; 0x6cc <NWK_SetAddr>
NWK_SetPanId(APP_PANID);
     362:	80 e7       	ldi	r24, 0x70	; 112
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	b9 d1       	rcall	.+882    	; 0x6da <NWK_SetPanId>
PHY_SetChannel(APP_CHANNEL);
     368:	8f e0       	ldi	r24, 0x0F	; 15
     36a:	0e 94 91 0b 	call	0x1722	; 0x1722 <PHY_SetChannel>
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     36e:	85 2d       	mov	r24, r5
     370:	0e 94 8d 0b 	call	0x171a	; 0x171a <PHY_SetRxState>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     374:	6e eb       	ldi	r22, 0xBE	; 190
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	85 2d       	mov	r24, r5
     37a:	b6 d1       	rcall	.+876    	; 0x6e8 <NWK_OpenEndpoint>
		{
		case APP_STATE_INITIAL: //nastaveni adresy, site, kanalu
			{
			appInit();
							  //$GPRMC,hhmmss.ss,A,llll.ll,a,yyyyy.yy,a,x.x,x.x,ddmmyy,x.x,a*hh
			strcpy(GPS_buffer, "$GPRMC,194509.000,A,4042.6142,N,07400.4168,W,2.03,5.84,160412,,,A*778\0");
     37c:	86 e4       	ldi	r24, 0x46	; 70
     37e:	ee e0       	ldi	r30, 0x0E	; 14
     380:	f2 e0       	ldi	r31, 0x02	; 2
     382:	a2 ec       	ldi	r26, 0xC2	; 194
     384:	b2 e0       	ldi	r27, 0x02	; 2
     386:	01 90       	ld	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	8a 95       	dec	r24
			send_pulse[0] = 1;
     38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x90>
			board_init();
     38e:	f7 01       	movw	r30, r14
     390:	50 82       	st	Z, r5
			reset_GPS();
     392:	12 df       	rcall	.-476    	; 0x1b8 <board_init>
     394:	4d df       	rcall	.-358    	; 0x230 <reset_GPS>
     396:	ff ef       	ldi	r31, 0xFF	; 255
     398:	29 e6       	ldi	r18, 0x69	; 105
     39a:	88 e1       	ldi	r24, 0x18	; 24
     39c:	f1 50       	subi	r31, 0x01	; 1
     39e:	20 40       	sbci	r18, 0x00	; 0
     3a0:	80 40       	sbci	r24, 0x00	; 0
     3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0xa6>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0xb0>
     3a6:	00 00       	nop
			_delay_ms(1000);
			appState = APP_STATE_IDLE;
     3a8:	50 92 d4 04 	sts	0x04D4, r5	; 0x8004d4 <appState>
     3ac:	cc cf       	rjmp	.-104    	; 0x346 <main+0x50>
     3ae:	9f ef       	ldi	r25, 0xFF	; 255
     3b0:	ed e3       	ldi	r30, 0x3D	; 61
     3b2:	f9 e4       	ldi	r31, 0x49	; 73
     3b4:	91 50       	subi	r25, 0x01	; 1
     3b6:	e0 40       	sbci	r30, 0x00	; 0
     3b8:	f0 40       	sbci	r31, 0x00	; 0
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0xbe>
     3bc:	00 c0       	rjmp	.+0      	; 0x3be <main+0xc8>
     3be:	00 00       	nop
			} break;

		case APP_STATE_IDLE:
			_delay_ms(3000);
			if (send_pulse_flag != 0) {
     3c0:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     3c4:	88 23       	and	r24, r24
     3c6:	a9 f0       	breq	.+42     	; 0x3f2 <main+0xfc>
	
}

static void appSendPulse (uint16_t dst)
{
	if (appDataReqBusy)
     3c8:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <appDataReqBusy>
     3cc:	81 11       	cpse	r24, r1
     3ce:	0f c0       	rjmp	.+30     	; 0x3ee <main+0xf8>
	return;
	
	appDataReq.dstAddr = dst;
     3d0:	f5 01       	movw	r30, r10
     3d2:	d6 82       	std	Z+6, r13	; 0x06
     3d4:	c5 82       	std	Z+5, r12	; 0x05
	appDataReq.dstEndpoint = 7;
     3d6:	37 82       	std	Z+7, r3	; 0x07
	appDataReq.srcEndpoint = 7;
     3d8:	30 86       	std	Z+8, r3	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     3da:	41 86       	std	Z+9, r4	; 0x09
	appDataReq.data = send_pulse;	
     3dc:	f3 86       	std	Z+11, r15	; 0x0b
	appDataReq.size = 1;
     3de:	e2 86       	std	Z+10, r14	; 0x0a
	appDataReq.confirm = appDataConf;
     3e0:	54 86       	std	Z+12, r5	; 0x0c
     3e2:	76 86       	std	Z+14, r7	; 0x0e
	NWK_DataReq(&appDataReq);
     3e4:	65 86       	std	Z+13, r6	; 0x0d
     3e6:	c5 01       	movw	r24, r10
     3e8:	b4 d1       	rcall	.+872    	; 0x752 <NWK_DataReq>
	
	appDataReqBusy = true;
     3ea:	50 92 c2 04 	sts	0x04C2, r5	; 0x8004c2 <appDataReqBusy>

		case APP_STATE_IDLE:
			_delay_ms(3000);
			if (send_pulse_flag != 0) {
					appSendPulse(0xffff);
					send_pulse_flag = 0;
     3ee:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <__data_end>
			}
			strcpy(send_buffer, "\n\rActual GPS_buffer: \n\r");
     3f2:	88 e1       	ldi	r24, 0x18	; 24
     3f4:	e5 e5       	ldi	r30, 0x55	; 85
     3f6:	f2 e0       	ldi	r31, 0x02	; 2
     3f8:	a2 ec       	ldi	r26, 0xC2	; 194
     3fa:	b3 e0       	ldi	r27, 0x03	; 3
     3fc:	01 90       	ld	r0, Z+
     3fe:	0d 92       	st	X+, r0
     400:	8a 95       	dec	r24
     402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x106>
			UART1_SendString(send_buffer);
     404:	82 ec       	ldi	r24, 0xC2	; 194
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <UART1_SendString>
			UART1_SendString(GPS_buffer);
     40c:	82 ec       	ldi	r24, 0xC2	; 194
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <UART1_SendString>
		
			if( (Parse_GPRMC_Time(GPS_buffer, hhmmss) ) >= 1) {
     414:	64 e0       	ldi	r22, 0x04	; 4
     416:	72 e0       	ldi	r23, 0x02	; 2
     418:	82 ec       	ldi	r24, 0xC2	; 194
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	1f df       	rcall	.-450    	; 0x25c <Parse_GPRMC_Time>
     41e:	88 23       	and	r24, r24
     420:	19 f1       	breq	.+70     	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
				strcpy(send_buffer, "\n\rGPRMC packet ok \n\r");
     422:	02 ec       	ldi	r16, 0xC2	; 194
     424:	13 e0       	ldi	r17, 0x03	; 3
     426:	85 e1       	ldi	r24, 0x15	; 21
     428:	ed e6       	ldi	r30, 0x6D	; 109
     42a:	f2 e0       	ldi	r31, 0x02	; 2
     42c:	d8 01       	movw	r26, r16
     42e:	01 90       	ld	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	8a 95       	dec	r24
     434:	e1 f7       	brne	.-8      	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
				UART1_SendString(send_buffer);
     436:	c8 01       	movw	r24, r16
     438:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <UART1_SendString>
				strcpy(send_buffer, "\n\rhhmmss: \n\r");
     43c:	8d e0       	ldi	r24, 0x0D	; 13
     43e:	e2 e8       	ldi	r30, 0x82	; 130
     440:	f2 e0       	ldi	r31, 0x02	; 2
     442:	d8 01       	movw	r26, r16
     444:	01 90       	ld	r0, Z+
     446:	0d 92       	st	X+, r0
     448:	8a 95       	dec	r24
     44a:	e1 f7       	brne	.-8      	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
				UART1_SendString(send_buffer);
     44c:	c8 01       	movw	r24, r16
     44e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <UART1_SendString>
				UART1_SendString(hhmmss);
     452:	84 e0       	ldi	r24, 0x04	; 4
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <UART1_SendString>
				strcpy(send_buffer, "\n\r");
     45a:	f8 01       	movw	r30, r16
     45c:	91 82       	std	Z+1, r9	; 0x01
     45e:	80 82       	st	Z, r8
     460:	12 82       	std	Z+2, r1	; 0x02
				appState = APP_STATE_LWM_SEND_TIME;
     462:	40 92 d4 04 	sts	0x04D4, r4	; 0x8004d4 <appState>
     466:	6f cf       	rjmp	.-290    	; 0x346 <main+0x50>
			}
			else
			{
				strcpy(send_buffer, "\n\r No GPS signal / Invalid packet\n");
     468:	83 e2       	ldi	r24, 0x23	; 35
     46a:	ef e8       	ldi	r30, 0x8F	; 143
     46c:	f2 e0       	ldi	r31, 0x02	; 2
     46e:	a2 ec       	ldi	r26, 0xC2	; 194
     470:	b3 e0       	ldi	r27, 0x03	; 3
     472:	01 90       	ld	r0, Z+
     474:	0d 92       	st	X+, r0
     476:	8a 95       	dec	r24
     478:	e1 f7       	brne	.-8      	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
				UART1_SendString(send_buffer);
     47a:	82 ec       	ldi	r24, 0xC2	; 194
     47c:	93 e0       	ldi	r25, 0x03	; 3
     47e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <UART1_SendString>
				appState = APP_STATE_IDLE;
     482:	50 92 d4 04 	sts	0x04D4, r5	; 0x8004d4 <appState>
     486:	5f cf       	rjmp	.-322    	; 0x346 <main+0x50>
     488:	e4 e0       	ldi	r30, 0x04	; 4
     48a:	f2 e0       	ldi	r31, 0x02	; 2
     48c:	ab e8       	ldi	r26, 0x8B	; 139
		
		
		case APP_STATE_LWM_SEND_TIME:
			for (uint8_t i=0; i <= 6; i++)
			{
				send_hhmmss[i] = (uint8_t)hhmmss[i];	//parsuje se pole znaku (char), a odesila se pole uint8_t
     48e:	b8 e1       	ldi	r27, 0x18	; 24
     490:	81 91       	ld	r24, Z+
			}
		break;
		
		
		case APP_STATE_LWM_SEND_TIME:
			for (uint8_t i=0; i <= 6; i++)
     492:	8d 93       	st	X+, r24
     494:	ec 17       	cp	r30, r28
     496:	fd 07       	cpc	r31, r29
			{
				send_hhmmss[i] = (uint8_t)hhmmss[i];	//parsuje se pole znaku (char), a odesila se pole uint8_t
			}			
			//appSendTime(APP_ADDR-1);
			appSendTime(0xFFFF);
     498:	d9 f7       	brne	.-10     	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
     49a:	c6 01       	movw	r24, r12
     49c:	71 de       	rcall	.-798    	; 0x180 <appSendTime>
			appState = APP_STATE_IDLE;
     49e:	50 92 d4 04 	sts	0x04D4, r5	; 0x8004d4 <appState>
     4a2:	51 cf       	rjmp	.-350    	; 0x346 <main+0x50>

000004a4 <__vector_6>:


/************************************************************************/
/* INTERRUPTS                                                           */
/************************************************************************/
ISR(INT5_vect){
     4a4:	1f 92       	push	r1
     4a6:	0f 92       	push	r0
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	0f 92       	push	r0
     4ac:	11 24       	eor	r1, r1
     4ae:	8f 93       	push	r24
	send_pulse_flag = 1;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <__data_end>
}
     4b6:	8f 91       	pop	r24
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <__vector_25>:

ISR(USART0_RX_vect){
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	0f 92       	push	r0
     4ca:	11 24       	eor	r1, r1
     4cc:	0b b6       	in	r0, 0x3b	; 59
     4ce:	0f 92       	push	r0
     4d0:	8f 93       	push	r24
     4d2:	9f 93       	push	r25
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	1f 92       	push	r1
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
	volatile char c = UDR0;
     4e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     4e6:	89 83       	std	Y+1, r24	; 0x01
	
	if (buffer_index <= (sizeof(GPS_buffer)-2) )
     4e8:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer_index>
     4ec:	8f 3f       	cpi	r24, 0xFF	; 255
     4ee:	59 f0       	breq	.+22     	; 0x506 <__vector_25+0x44>
	{
		GPS_buffer[buffer_index] = c;
     4f0:	e8 2f       	mov	r30, r24
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	99 81       	ldd	r25, Y+1	; 0x01
     4f6:	ee 53       	subi	r30, 0x3E	; 62
     4f8:	fd 4f       	sbci	r31, 0xFD	; 253
     4fa:	90 83       	st	Z, r25
		GPS_buffer[(buffer_index + 1)] = '\0';
     4fc:	11 82       	std	Z+1, r1	; 0x01
		buffer_index++;
     4fe:	8f 5f       	subi	r24, 0xFF	; 255
     500:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <buffer_index>
     504:	02 c0       	rjmp	.+4      	; 0x50a <__vector_25+0x48>
	}
	else 
	{
		buffer_index = 0;
     506:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <buffer_index>
	}

}
     50a:	0f 90       	pop	r0
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	ff 91       	pop	r31
     512:	ef 91       	pop	r30
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	0f 90       	pop	r0
     51a:	0b be       	out	0x3b, r0	; 59
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <__vector_36>:

//USART1 je spojena s PC
ISR(USART1_RX_vect){
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	0b b6       	in	r0, 0x3b	; 59
     532:	0f 92       	push	r0
     534:	2f 93       	push	r18
     536:	3f 93       	push	r19
     538:	4f 93       	push	r20
     53a:	5f 93       	push	r21
     53c:	6f 93       	push	r22
     53e:	7f 93       	push	r23
     540:	8f 93       	push	r24
     542:	9f 93       	push	r25
     544:	af 93       	push	r26
     546:	bf 93       	push	r27
     548:	ef 93       	push	r30
     54a:	ff 93       	push	r31
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	c1 55       	subi	r28, 0x51	; 81
     556:	d1 09       	sbc	r29, r1
     558:	de bf       	out	0x3e, r29	; 62
     55a:	cd bf       	out	0x3d, r28	; 61
	volatile char c = UDR1; //Read the value out of the UART buffer
     55c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     560:	89 83       	std	Y+1, r24	; 0x01
	char reset_buffer[80];
	if (c == 'r') {
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	82 37       	cpi	r24, 0x72	; 114
     566:	71 f4       	brne	.+28     	; 0x584 <__vector_36+0x5e>
		reset_GPS();
     568:	63 de       	rcall	.-826    	; 0x230 <reset_GPS>
		strcpy(reset_buffer, "\n\rGPS reset\n\r");
     56a:	8e e0       	ldi	r24, 0x0E	; 14
     56c:	e2 eb       	ldi	r30, 0xB2	; 178
     56e:	f2 e0       	ldi	r31, 0x02	; 2
     570:	de 01       	movw	r26, r28
     572:	12 96       	adiw	r26, 0x02	; 2
     574:	01 90       	ld	r0, Z+
     576:	0d 92       	st	X+, r0
     578:	8a 95       	dec	r24
     57a:	e1 f7       	brne	.-8      	; 0x574 <__vector_36+0x4e>
		UART1_SendString(reset_buffer);
     57c:	ce 01       	movw	r24, r28
     57e:	02 96       	adiw	r24, 0x02	; 2
     580:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <UART1_SendString>
	}
	if (c == '1') {
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	81 33       	cpi	r24, 0x31	; 49
     588:	49 f4       	brne	.+18     	; 0x59c <__vector_36+0x76>
     58a:	2f ef       	ldi	r18, 0xFF	; 255
     58c:	81 e1       	ldi	r24, 0x11	; 17
     58e:	9a e7       	ldi	r25, 0x7A	; 122
     590:	21 50       	subi	r18, 0x01	; 1
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	90 40       	sbci	r25, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <__vector_36+0x6a>
     598:	00 c0       	rjmp	.+0      	; 0x59a <__vector_36+0x74>
     59a:	00 00       	nop
		_delay_ms(5000); // pause execution when we send char '1' for debugging
	}
     59c:	cf 5a       	subi	r28, 0xAF	; 175
     59e:	df 4f       	sbci	r29, 0xFF	; 255
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	ff 91       	pop	r31
     5b0:	ef 91       	pop	r30
     5b2:	bf 91       	pop	r27
     5b4:	af 91       	pop	r26
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	7f 91       	pop	r23
     5bc:	6f 91       	pop	r22
     5be:	5f 91       	pop	r21
     5c0:	4f 91       	pop	r20
     5c2:	3f 91       	pop	r19
     5c4:	2f 91       	pop	r18
     5c6:	0f 90       	pop	r0
     5c8:	0b be       	out	0x3b, r0	; 59
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti

000005d4 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     5d4:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	a8 95       	wdr
     5dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     5e0:	88 61       	ori	r24, 0x18	; 24
     5e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     5e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     5ea:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     5ec:	e1 e6       	ldi	r30, 0x61	; 97
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 e8       	ldi	r24, 0x80	; 128
     5f2:	80 83       	st	Z, r24
  CLKPR = 0;
     5f4:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     5f6:	78 94       	sei

  HAL_TimerInit();
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <HAL_TimerInit>
     5fa:	08 95       	ret

000005fc <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     5fc:	10 92 91 18 	sts	0x1891, r1	; 0x801891 <halTimerIrqCount>
     600:	80 e1       	ldi	r24, 0x10	; 16
     602:	97 e2       	ldi	r25, 0x27	; 39
     604:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     608:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     60c:	e1 ea       	ldi	r30, 0xA1	; 161
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	88 e0       	ldi	r24, 0x08	; 8
     612:	80 83       	st	Z, r24
     614:	80 81       	ld	r24, Z
     616:	82 60       	ori	r24, 0x02	; 2
     618:	80 83       	st	Z, r24
     61a:	e2 e7       	ldi	r30, 0x72	; 114
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	82 60       	ori	r24, 0x02	; 2
     622:	80 83       	st	Z, r24
     624:	08 95       	ret

00000626 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     626:	1f 92       	push	r1
     628:	0f 92       	push	r0
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	0f 92       	push	r0
     62e:	11 24       	eor	r1, r1
     630:	8f 93       	push	r24
  halTimerIrqCount++;
     632:	80 91 91 18 	lds	r24, 0x1891	; 0x801891 <halTimerIrqCount>
     636:	8f 5f       	subi	r24, 0xFF	; 255
     638:	80 93 91 18 	sts	0x1891, r24	; 0x801891 <halTimerIrqCount>
}
     63c:	8f 91       	pop	r24
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	8f 93       	push	r24
  halSleepTimerEvent = true;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <halSleepTimerEvent>
}
     65a:	8f 91       	pop	r24
     65c:	0f 90       	pop	r0
     65e:	0f be       	out	0x3f, r0	; 63
     660:	0f 90       	pop	r0
     662:	1f 90       	pop	r1
     664:	18 95       	reti

00000666 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/

ISR(USARTx_UDRE_vect)
{
     666:	1f 92       	push	r1
     668:	0f 92       	push	r0
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	0f 92       	push	r0
     66e:	11 24       	eor	r1, r1
     670:	0b b6       	in	r0, 0x3b	; 59
     672:	0f 92       	push	r0
     674:	8f 93       	push	r24
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
  udrEmpty = true;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     680:	e9 ec       	ldi	r30, 0xC9	; 201
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	8f 7d       	andi	r24, 0xDF	; 223
     688:	80 83       	st	Z, r24
}
     68a:	ff 91       	pop	r31
     68c:	ef 91       	pop	r30
     68e:	8f 91       	pop	r24
     690:	0f 90       	pop	r0
     692:	0b be       	out	0x3b, r0	; 59
     694:	0f 90       	pop	r0
     696:	0f be       	out	0x3f, r0	; 63
     698:	0f 90       	pop	r0
     69a:	1f 90       	pop	r1
     69c:	18 95       	reti

0000069e <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     69e:	e2 e9       	ldi	r30, 0x92	; 146
     6a0:	f8 e1       	ldi	r31, 0x18	; 24
     6a2:	14 82       	std	Z+4, r1	; 0x04
     6a4:	15 82       	std	Z+5, r1	; 0x05
     6a6:	11 82       	std	Z+1, r1	; 0x01
     6a8:	10 82       	st	Z, r1
     6aa:	17 a2       	std	Z+39, r1	; 0x27
     6ac:	16 a2       	std	Z+38, r1	; 0x26
     6ae:	e8 e9       	ldi	r30, 0x98	; 152
     6b0:	f8 e1       	ldi	r31, 0x18	; 24
     6b2:	88 eb       	ldi	r24, 0xB8	; 184
     6b4:	98 e1       	ldi	r25, 0x18	; 24
     6b6:	11 92       	st	Z+, r1
     6b8:	11 92       	st	Z+, r1
     6ba:	e8 17       	cp	r30, r24
     6bc:	f9 07       	cpc	r31, r25
     6be:	d9 f7       	brne	.-10     	; 0x6b6 <NWK_Init+0x18>
     6c0:	42 d6       	rcall	.+3204   	; 0x1346 <nwkTxInit>
     6c2:	60 d3       	rcall	.+1728   	; 0xd84 <nwkRxInit>
     6c4:	0d d1       	rcall	.+538    	; 0x8e0 <nwkFrameInit>
     6c6:	40 d0       	rcall	.+128    	; 0x748 <nwkDataReqInit>
     6c8:	92 c1       	rjmp	.+804    	; 0x9ee <nwkRouteInit>
     6ca:	08 95       	ret

000006cc <NWK_SetAddr>:
     6cc:	90 93 93 18 	sts	0x1893, r25	; 0x801893 <nwkIb+0x1>
     6d0:	80 93 92 18 	sts	0x1892, r24	; 0x801892 <nwkIb>
     6d4:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <PHY_SetShortAddr>
     6d8:	08 95       	ret

000006da <NWK_SetPanId>:
     6da:	90 93 95 18 	sts	0x1895, r25	; 0x801895 <nwkIb+0x3>
     6de:	80 93 94 18 	sts	0x1894, r24	; 0x801894 <nwkIb+0x2>
     6e2:	0c 94 95 0b 	jmp	0x172a	; 0x172a <PHY_SetPanId>
     6e6:	08 95       	ret

000006e8 <NWK_OpenEndpoint>:
     6e8:	e8 2f       	mov	r30, r24
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	ee 0f       	add	r30, r30
     6ee:	ff 1f       	adc	r31, r31
     6f0:	e8 56       	subi	r30, 0x68	; 104
     6f2:	f7 4e       	sbci	r31, 0xE7	; 231
     6f4:	71 83       	std	Z+1, r23	; 0x01
     6f6:	60 83       	st	Z, r22
     6f8:	08 95       	ret

000006fa <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     6fa:	8b d3       	rcall	.+1814   	; 0xe12 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     6fc:	20 d7       	rcall	.+3648   	; 0x153e <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     6fe:	4d c0       	rjmp	.+154    	; 0x79a <nwkDataReqTaskHandler>
     700:	08 95       	ret

00000702 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     702:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <nwkDataReqQueue>
     706:	f0 91 d8 04 	lds	r31, 0x04D8	; 0x8004d8 <nwkDataReqQueue+0x1>
     70a:	30 97       	sbiw	r30, 0x00	; 0
     70c:	d9 f0       	breq	.+54     	; 0x744 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     70e:	22 81       	ldd	r18, Z+2	; 0x02
     710:	33 81       	ldd	r19, Z+3	; 0x03
     712:	82 17       	cp	r24, r18
     714:	93 07       	cpc	r25, r19
     716:	89 f4       	brne	.+34     	; 0x73a <nwkDataReqTxConf+0x38>
     718:	05 c0       	rjmp	.+10     	; 0x724 <nwkDataReqTxConf+0x22>
     71a:	22 81       	ldd	r18, Z+2	; 0x02
     71c:	33 81       	ldd	r19, Z+3	; 0x03
     71e:	28 17       	cp	r18, r24
     720:	39 07       	cpc	r19, r25
     722:	59 f4       	brne	.+22     	; 0x73a <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     724:	dc 01       	movw	r26, r24
     726:	ad 57       	subi	r26, 0x7D	; 125
     728:	bf 4f       	sbci	r27, 0xFF	; 255
     72a:	2c 91       	ld	r18, X
     72c:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     72e:	13 96       	adiw	r26, 0x03	; 3
     730:	2c 91       	ld	r18, X
     732:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     734:	22 e0       	ldi	r18, 0x02	; 2
     736:	24 83       	std	Z+4, r18	; 0x04
      break;
     738:	05 c0       	rjmp	.+10     	; 0x744 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     73a:	01 90       	ld	r0, Z+
     73c:	f0 81       	ld	r31, Z
     73e:	e0 2d       	mov	r30, r0
     740:	30 97       	sbiw	r30, 0x00	; 0
     742:	59 f7       	brne	.-42     	; 0x71a <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     744:	11 c1       	rjmp	.+546    	; 0x968 <nwkFrameFree>
     746:	08 95       	ret

00000748 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     748:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <nwkDataReqQueue+0x1>
     74c:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <nwkDataReqQueue>
     750:	08 95       	ret

00000752 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     752:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     754:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     756:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     758:	13 82       	std	Z+3, r1	; 0x03
     75a:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     75c:	a2 e9       	ldi	r26, 0x92	; 146
     75e:	b8 e1       	ldi	r27, 0x18	; 24
     760:	96 96       	adiw	r26, 0x26	; 38
     762:	8d 91       	ld	r24, X+
     764:	9c 91       	ld	r25, X
     766:	97 97       	sbiw	r26, 0x27	; 39
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	97 96       	adiw	r26, 0x27	; 39
     76c:	9c 93       	st	X, r25
     76e:	8e 93       	st	-X, r24
     770:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     772:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <nwkDataReqQueue>
     776:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <nwkDataReqQueue+0x1>
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	39 f4       	brne	.+14     	; 0x78c <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     77e:	11 82       	std	Z+1, r1	; 0x01
     780:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     782:	f0 93 d8 04 	sts	0x04D8, r31	; 0x8004d8 <nwkDataReqQueue+0x1>
     786:	e0 93 d7 04 	sts	0x04D7, r30	; 0x8004d7 <nwkDataReqQueue>
     78a:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     78c:	91 83       	std	Z+1, r25	; 0x01
     78e:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     790:	f0 93 d8 04 	sts	0x04D8, r31	; 0x8004d8 <nwkDataReqQueue+0x1>
     794:	e0 93 d7 04 	sts	0x04D7, r30	; 0x8004d7 <nwkDataReqQueue>
     798:	08 95       	ret

0000079a <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7a2:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <nwkDataReqQueue>
     7a6:	f0 91 d8 04 	lds	r31, 0x04D8	; 0x8004d8 <nwkDataReqQueue+0x1>
     7aa:	30 97       	sbiw	r30, 0x00	; 0
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <nwkDataReqTaskHandler+0x16>
     7ae:	93 c0       	rjmp	.+294    	; 0x8d6 <nwkDataReqTaskHandler+0x13c>
     7b0:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     7b2:	8c 81       	ldd	r24, Y+4	; 0x04
     7b4:	88 23       	and	r24, r24
     7b6:	21 f0       	breq	.+8      	; 0x7c0 <nwkDataReqTaskHandler+0x26>
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	09 f4       	brne	.+2      	; 0x7be <nwkDataReqTaskHandler+0x24>
     7bc:	66 c0       	rjmp	.+204    	; 0x88a <nwkDataReqTaskHandler+0xf0>
     7be:	85 c0       	rjmp	.+266    	; 0x8ca <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     7c0:	9a d0       	rcall	.+308    	; 0x8f6 <nwkFrameAlloc>
     7c2:	8c 01       	movw	r16, r24
     7c4:	00 97       	sbiw	r24, 0x00	; 0
     7c6:	21 f4       	brne	.+8      	; 0x7d0 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     7cc:	8f 87       	std	Y+15, r24	; 0x0f
     7ce:	83 c0       	rjmp	.+262    	; 0x8d6 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     7d0:	9b 83       	std	Y+3, r25	; 0x03
     7d2:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     7d8:	f8 01       	movw	r30, r16
     7da:	e9 57       	subi	r30, 0x79	; 121
     7dc:	ff 4f       	sbci	r31, 0xFF	; 255
     7de:	81 e8       	ldi	r24, 0x81	; 129
     7e0:	93 e0       	ldi	r25, 0x03	; 3
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	89 85       	ldd	r24, Y+9	; 0x09
     7ea:	82 fb       	bst	r24, 2
     7ec:	88 27       	eor	r24, r24
     7ee:	80 f9       	bld	r24, 0
     7f0:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     7f2:	99 85       	ldd	r25, Y+9	; 0x09
     7f4:	d8 01       	movw	r26, r16
     7f6:	1b 96       	adiw	r26, 0x0b	; 11
     7f8:	8c 91       	ld	r24, X
     7fa:	1b 97       	sbiw	r26, 0x0b	; 11
     7fc:	90 fb       	bst	r25, 0
     7fe:	80 f9       	bld	r24, 0
     800:	1b 96       	adiw	r26, 0x0b	; 11
     802:	8c 93       	st	X, r24
     804:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     806:	99 85       	ldd	r25, Y+9	; 0x09
     808:	93 fb       	bst	r25, 3
     80a:	99 27       	eor	r25, r25
     80c:	90 f9       	bld	r25, 0
     80e:	90 fb       	bst	r25, 0
     810:	82 f9       	bld	r24, 2
     812:	1b 96       	adiw	r26, 0x0b	; 11
     814:	8c 93       	st	X, r24
     816:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     818:	e2 e9       	ldi	r30, 0x92	; 146
     81a:	f8 e1       	ldi	r31, 0x18	; 24
     81c:	84 81       	ldd	r24, Z+4	; 0x04
     81e:	8f 5f       	subi	r24, 0xFF	; 255
     820:	84 83       	std	Z+4, r24	; 0x04
     822:	1c 96       	adiw	r26, 0x0c	; 12
     824:	8c 93       	st	X, r24
     826:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     828:	80 81       	ld	r24, Z
     82a:	91 81       	ldd	r25, Z+1	; 0x01
     82c:	1e 96       	adiw	r26, 0x0e	; 14
     82e:	9c 93       	st	X, r25
     830:	8e 93       	st	-X, r24
     832:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     834:	8d 81       	ldd	r24, Y+5	; 0x05
     836:	9e 81       	ldd	r25, Y+6	; 0x06
     838:	50 96       	adiw	r26, 0x10	; 16
     83a:	9c 93       	st	X, r25
     83c:	8e 93       	st	-X, r24
     83e:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     840:	88 85       	ldd	r24, Y+8	; 0x08
     842:	98 2f       	mov	r25, r24
     844:	9f 70       	andi	r25, 0x0F	; 15
     846:	51 96       	adiw	r26, 0x11	; 17
     848:	8c 91       	ld	r24, X
     84a:	51 97       	sbiw	r26, 0x11	; 17
     84c:	80 7f       	andi	r24, 0xF0	; 240
     84e:	89 2b       	or	r24, r25
     850:	51 96       	adiw	r26, 0x11	; 17
     852:	8c 93       	st	X, r24
     854:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     856:	9f 81       	ldd	r25, Y+7	; 0x07
     858:	92 95       	swap	r25
     85a:	90 7f       	andi	r25, 0xF0	; 240
     85c:	8f 70       	andi	r24, 0x0F	; 15
     85e:	89 2b       	or	r24, r25
     860:	51 96       	adiw	r26, 0x11	; 17
     862:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     864:	f8 01       	movw	r30, r16
     866:	ef 57       	subi	r30, 0x7F	; 127
     868:	ff 4f       	sbci	r31, 0xFF	; 255
     86a:	4c 85       	ldd	r20, Y+12	; 0x0c
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	6a 85       	ldd	r22, Y+10	; 0x0a
     870:	7b 85       	ldd	r23, Y+11	; 0x0b
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <memcpy>
  frame->size += req->size;
     87a:	f8 01       	movw	r30, r16
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	8c 85       	ldd	r24, Y+12	; 0x0c
     880:	89 0f       	add	r24, r25
     882:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     884:	c8 01       	movw	r24, r16
     886:	82 d5       	rcall	.+2820   	; 0x138c <nwkTxFrame>
     888:	26 c0       	rjmp	.+76     	; 0x8d6 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     88a:	ec 17       	cp	r30, r28
     88c:	fd 07       	cpc	r31, r29
     88e:	41 f4       	brne	.+16     	; 0x8a0 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     890:	80 81       	ld	r24, Z
     892:	91 81       	ldd	r25, Z+1	; 0x01
     894:	90 93 d8 04 	sts	0x04D8, r25	; 0x8004d8 <nwkDataReqQueue+0x1>
     898:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <nwkDataReqQueue>
     89c:	0a c0       	rjmp	.+20     	; 0x8b2 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     89e:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	8c 17       	cp	r24, r28
     8a6:	9d 07       	cpc	r25, r29
     8a8:	d1 f7       	brne	.-12     	; 0x89e <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     8aa:	88 81       	ld	r24, Y
     8ac:	99 81       	ldd	r25, Y+1	; 0x01
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     8b2:	e2 e9       	ldi	r30, 0x92	; 146
     8b4:	f8 e1       	ldi	r31, 0x18	; 24
     8b6:	86 a1       	ldd	r24, Z+38	; 0x26
     8b8:	97 a1       	ldd	r25, Z+39	; 0x27
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	97 a3       	std	Z+39, r25	; 0x27
     8be:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     8c0:	ed 85       	ldd	r30, Y+13	; 0x0d
     8c2:	fe 85       	ldd	r31, Y+14	; 0x0e
     8c4:	ce 01       	movw	r24, r28
     8c6:	19 95       	eicall
     8c8:	06 c0       	rjmp	.+12     	; 0x8d6 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     8ca:	09 90       	ld	r0, Y+
     8cc:	d8 81       	ld	r29, Y
     8ce:	c0 2d       	mov	r28, r0
     8d0:	20 97       	sbiw	r28, 0x00	; 0
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <nwkDataReqTaskHandler+0x13c>
     8d4:	6e cf       	rjmp	.-292    	; 0x7b2 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	08 95       	ret

000008e0 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     8e0:	e9 ed       	ldi	r30, 0xD9	; 217
     8e2:	f4 e0       	ldi	r31, 0x04	; 4
     8e4:	87 ee       	ldi	r24, 0xE7	; 231
     8e6:	94 e1       	ldi	r25, 0x14	; 20
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     8e8:	10 82       	st	Z, r1
     8ea:	e7 57       	subi	r30, 0x77	; 119
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     8ee:	e8 17       	cp	r30, r24
     8f0:	f9 07       	cpc	r31, r25
     8f2:	d1 f7       	brne	.-12     	; 0x8e8 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     8f4:	08 95       	ret

000008f6 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     8f6:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <nwkFrameFrames>
     8fa:	88 23       	and	r24, r24
     8fc:	59 f0       	breq	.+22     	; 0x914 <nwkFrameAlloc+0x1e>
     8fe:	e2 e6       	ldi	r30, 0x62	; 98
     900:	f5 e0       	ldi	r31, 0x05	; 5
     902:	67 ee       	ldi	r22, 0xE7	; 231
     904:	74 e1       	ldi	r23, 0x14	; 20
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	ac 01       	movw	r20, r24
     90c:	20 81       	ld	r18, Z
     90e:	21 11       	cpse	r18, r1
     910:	22 c0       	rjmp	.+68     	; 0x956 <nwkFrameAlloc+0x60>
     912:	02 c0       	rjmp	.+4      	; 0x918 <nwkFrameAlloc+0x22>
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     918:	69 e8       	ldi	r22, 0x89	; 137
     91a:	64 9f       	mul	r22, r20
     91c:	90 01       	movw	r18, r0
     91e:	65 9f       	mul	r22, r21
     920:	30 0d       	add	r19, r0
     922:	11 24       	eor	r1, r1
     924:	c9 01       	movw	r24, r18
     926:	87 52       	subi	r24, 0x27	; 39
     928:	9b 4f       	sbci	r25, 0xFB	; 251
     92a:	fc 01       	movw	r30, r24
     92c:	11 92       	st	Z+, r1
     92e:	6a 95       	dec	r22
     930:	e9 f7       	brne	.-6      	; 0x92c <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     932:	40 e1       	ldi	r20, 0x10	; 16
     934:	fc 01       	movw	r30, r24
     936:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     938:	ef 57       	subi	r30, 0x7F	; 127
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	25 51       	subi	r18, 0x15	; 21
     93e:	3b 4f       	sbci	r19, 0xFB	; 251
     940:	31 83       	std	Z+1, r19	; 0x01
     942:	20 83       	st	Z, r18
      nwkIb.lock++;
     944:	e2 e9       	ldi	r30, 0x92	; 146
     946:	f8 e1       	ldi	r31, 0x18	; 24
     948:	26 a1       	ldd	r18, Z+38	; 0x26
     94a:	37 a1       	ldd	r19, Z+39	; 0x27
     94c:	2f 5f       	subi	r18, 0xFF	; 255
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
     950:	37 a3       	std	Z+39, r19	; 0x27
     952:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     954:	08 95       	ret
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	e7 57       	subi	r30, 0x77	; 119
     95a:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     95c:	e6 17       	cp	r30, r22
     95e:	f7 07       	cpc	r31, r23
     960:	a1 f6       	brne	.-88     	; 0x90a <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
}
     966:	08 95       	ret

00000968 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     968:	fc 01       	movw	r30, r24
     96a:	10 82       	st	Z, r1
  nwkIb.lock--;
     96c:	e2 e9       	ldi	r30, 0x92	; 146
     96e:	f8 e1       	ldi	r31, 0x18	; 24
     970:	86 a1       	ldd	r24, Z+38	; 0x26
     972:	97 a1       	ldd	r25, Z+39	; 0x27
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	97 a3       	std	Z+39, r25	; 0x27
     978:	86 a3       	std	Z+38, r24	; 0x26
     97a:	08 95       	ret

0000097c <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     97c:	00 97       	sbiw	r24, 0x00	; 0
     97e:	41 f0       	breq	.+16     	; 0x990 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     980:	fc 01       	movw	r30, r24
     982:	e7 57       	subi	r30, 0x77	; 119
     984:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     986:	84 e1       	ldi	r24, 0x14	; 20
     988:	e7 3e       	cpi	r30, 0xE7	; 231
     98a:	f8 07       	cpc	r31, r24
     98c:	18 f0       	brcs	.+6      	; 0x994 <nwkFrameNext+0x18>
     98e:	12 c0       	rjmp	.+36     	; 0x9b4 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     990:	e9 ed       	ldi	r30, 0xD9	; 217
     992:	f4 e0       	ldi	r31, 0x04	; 4
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     994:	80 81       	ld	r24, Z
     996:	88 23       	and	r24, r24
     998:	21 f0       	breq	.+8      	; 0x9a2 <nwkFrameNext+0x26>
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <nwkFrameNext+0x3e>
     99c:	80 81       	ld	r24, Z
     99e:	81 11       	cpse	r24, r1
     9a0:	0f c0       	rjmp	.+30     	; 0x9c0 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9a2:	e7 57       	subi	r30, 0x77	; 119
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	84 e1       	ldi	r24, 0x14	; 20
     9a8:	e7 3e       	cpi	r30, 0xE7	; 231
     9aa:	f8 07       	cpc	r31, r24
     9ac:	b8 f3       	brcs	.-18     	; 0x99c <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	08 95       	ret
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     9ba:	8e 2f       	mov	r24, r30
     9bc:	9f 2f       	mov	r25, r31
     9be:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9c0:	8e 2f       	mov	r24, r30
     9c2:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     9c4:	08 95       	ret

000009c6 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     9c6:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     9c8:	dc 01       	movw	r26, r24
     9ca:	ad 57       	subi	r26, 0x7D	; 125
     9cc:	bf 4f       	sbci	r27, 0xFF	; 255
     9ce:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     9d0:	a2 e9       	ldi	r26, 0x92	; 146
     9d2:	b8 e1       	ldi	r27, 0x18	; 24
     9d4:	14 96       	adiw	r26, 0x04	; 4
     9d6:	9c 91       	ld	r25, X
     9d8:	14 97       	sbiw	r26, 0x04	; 4
     9da:	9f 5f       	subi	r25, 0xFF	; 255
     9dc:	14 96       	adiw	r26, 0x04	; 4
     9de:	9c 93       	st	X, r25
     9e0:	14 97       	sbiw	r26, 0x04	; 4
     9e2:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     9e4:	8d 91       	ld	r24, X+
     9e6:	9c 91       	ld	r25, X
     9e8:	96 87       	std	Z+14, r25	; 0x0e
     9ea:	85 87       	std	Z+13, r24	; 0x0d
     9ec:	08 95       	ret

000009ee <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     9ee:	a8 ee       	ldi	r26, 0xE8	; 232
     9f0:	b4 e1       	ldi	r27, 0x14	; 20
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	4f ef       	ldi	r20, 0xFF	; 255
     9f8:	5f ef       	ldi	r21, 0xFF	; 255
     9fa:	11 96       	adiw	r26, 0x01	; 1
     9fc:	5c 93       	st	X, r21
     9fe:	4e 93       	st	-X, r20
     a00:	fc 01       	movw	r30, r24
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	ee 0f       	add	r30, r30
     a08:	ff 1f       	adc	r31, r31
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	e8 1b       	sub	r30, r24
     a10:	f9 0b       	sbc	r31, r25
     a12:	e9 51       	subi	r30, 0x19	; 25
     a14:	fb 4e       	sbci	r31, 0xEB	; 235
     a16:	20 81       	ld	r18, Z
     a18:	2e 7f       	andi	r18, 0xFE	; 254
     a1a:	20 83       	st	Z, r18
     a1c:	14 96       	adiw	r26, 0x04	; 4
     a1e:	1c 92       	st	X, r1
     a20:	14 97       	sbiw	r26, 0x04	; 4
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	17 96       	adiw	r26, 0x07	; 7
     a26:	84 36       	cpi	r24, 0x64	; 100
     a28:	91 05       	cpc	r25, r1
     a2a:	39 f7       	brne	.-50     	; 0x9fa <nwkRouteInit+0xc>
     a2c:	08 95       	ret

00000a2e <NWK_RouteFindEntry>:
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	e8 ee       	ldi	r30, 0xE8	; 232
     a38:	f4 e1       	ldi	r31, 0x14	; 20
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	06 2f       	mov	r16, r22
     a40:	10 e0       	ldi	r17, 0x00	; 0
     a42:	40 81       	ld	r20, Z
     a44:	51 81       	ldd	r21, Z+1	; 0x01
     a46:	48 17       	cp	r20, r24
     a48:	59 07       	cpc	r21, r25
     a4a:	b1 f4       	brne	.+44     	; 0xa78 <NWK_RouteFindEntry+0x4a>
     a4c:	d9 01       	movw	r26, r18
     a4e:	aa 0f       	add	r26, r26
     a50:	bb 1f       	adc	r27, r27
     a52:	aa 0f       	add	r26, r26
     a54:	bb 1f       	adc	r27, r27
     a56:	aa 0f       	add	r26, r26
     a58:	bb 1f       	adc	r27, r27
     a5a:	a2 1b       	sub	r26, r18
     a5c:	b3 0b       	sbc	r27, r19
     a5e:	a9 51       	subi	r26, 0x19	; 25
     a60:	bb 4e       	sbci	r27, 0xEB	; 235
     a62:	4c 91       	ld	r20, X
     a64:	46 95       	lsr	r20
     a66:	41 70       	andi	r20, 0x01	; 1
     a68:	c4 2f       	mov	r28, r20
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	d4 2f       	mov	r29, r20
     a6e:	c0 17       	cp	r28, r16
     a70:	d1 07       	cpc	r29, r17
     a72:	11 f4       	brne	.+4      	; 0xa78 <NWK_RouteFindEntry+0x4a>
     a74:	cd 01       	movw	r24, r26
     a76:	08 c0       	rjmp	.+16     	; 0xa88 <NWK_RouteFindEntry+0x5a>
     a78:	2f 5f       	subi	r18, 0xFF	; 255
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	37 96       	adiw	r30, 0x07	; 7
     a7e:	24 36       	cpi	r18, 0x64	; 100
     a80:	31 05       	cpc	r19, r1
     a82:	f9 f6       	brne	.-66     	; 0xa42 <NWK_RouteFindEntry+0x14>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <NWK_RouteNewEntry>:
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e7 ee       	ldi	r30, 0xE7	; 231
     a98:	f4 e1       	ldi	r31, 0x14	; 20
     a9a:	80 81       	ld	r24, Z
     a9c:	80 fd       	sbrc	r24, 0
     a9e:	0d c0       	rjmp	.+26     	; 0xaba <NWK_RouteNewEntry+0x28>
     aa0:	85 81       	ldd	r24, Z+5	; 0x05
     aa2:	88 23       	and	r24, r24
     aa4:	81 f0       	breq	.+32     	; 0xac6 <NWK_RouteNewEntry+0x34>
     aa6:	10 97       	sbiw	r26, 0x00	; 0
     aa8:	39 f0       	breq	.+14     	; 0xab8 <NWK_RouteNewEntry+0x26>
     aaa:	15 96       	adiw	r26, 0x05	; 5
     aac:	9c 91       	ld	r25, X
     aae:	15 97       	sbiw	r26, 0x05	; 5
     ab0:	89 17       	cp	r24, r25
     ab2:	18 f4       	brcc	.+6      	; 0xaba <NWK_RouteNewEntry+0x28>
     ab4:	df 01       	movw	r26, r30
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <NWK_RouteNewEntry+0x28>
     ab8:	df 01       	movw	r26, r30
     aba:	37 96       	adiw	r30, 0x07	; 7
     abc:	87 e1       	ldi	r24, 0x17	; 23
     abe:	e3 3a       	cpi	r30, 0xA3	; 163
     ac0:	f8 07       	cpc	r31, r24
     ac2:	59 f7       	brne	.-42     	; 0xa9a <NWK_RouteNewEntry+0x8>
     ac4:	fd 01       	movw	r30, r26
     ac6:	80 81       	ld	r24, Z
     ac8:	8d 70       	andi	r24, 0x0D	; 13
     aca:	80 63       	ori	r24, 0x30	; 48
     acc:	80 83       	st	Z, r24
     ace:	80 e8       	ldi	r24, 0x80	; 128
     ad0:	85 83       	std	Z+5, r24	; 0x05
     ad2:	cf 01       	movw	r24, r30
     ad4:	08 95       	ret

00000ad6 <NWK_RouteFreeEntry>:
     ad6:	fc 01       	movw	r30, r24
     ad8:	80 81       	ld	r24, Z
     ada:	80 fd       	sbrc	r24, 0
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <NWK_RouteFreeEntry+0x12>
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	9f ef       	ldi	r25, 0xFF	; 255
     ae2:	92 83       	std	Z+2, r25	; 0x02
     ae4:	81 83       	std	Z+1, r24	; 0x01
     ae6:	15 82       	std	Z+5, r1	; 0x05
     ae8:	08 95       	ret

00000aea <NWK_RouteNextHop>:
     aea:	a1 df       	rcall	.-190    	; 0xa2e <NWK_RouteFindEntry>
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	21 f0       	breq	.+8      	; 0xaf8 <NWK_RouteNextHop+0xe>
     af0:	fc 01       	movw	r30, r24
     af2:	83 81       	ldd	r24, Z+3	; 0x03
     af4:	94 81       	ldd	r25, Z+4	; 0x04
     af6:	08 95       	ret
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	9f ef       	ldi	r25, 0xFF	; 255
     afc:	08 95       	ret

00000afe <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     afe:	97 df       	rcall	.-210    	; 0xa2e <NWK_RouteFindEntry>
  if (entry)
     b00:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     b02:	09 f0       	breq	.+2      	; 0xb06 <nwkRouteRemove+0x8>
     b04:	e8 cf       	rjmp	.-48     	; 0xad6 <NWK_RouteFreeEntry>
     b06:	08 95       	ret

00000b08 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     b12:	01 85       	ldd	r16, Z+9	; 0x09
     b14:	12 85       	ldd	r17, Z+10	; 0x0a
     b16:	11 23       	and	r17, r17
     b18:	2c f4       	brge	.+10     	; 0xb24 <nwkRouteFrameReceived+0x1c>
     b1a:	85 85       	ldd	r24, Z+13	; 0x0d
     b1c:	96 85       	ldd	r25, Z+14	; 0x0e
     b1e:	08 17       	cp	r16, r24
     b20:	19 07       	cpc	r17, r25
     b22:	e1 f5       	brne	.+120    	; 0xb9c <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     b24:	85 81       	ldd	r24, Z+5	; 0x05
     b26:	96 81       	ldd	r25, Z+6	; 0x06
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	c1 f1       	breq	.+112    	; 0xb9c <nwkRouteFrameReceived+0x94>
     b2c:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	85 85       	ldd	r24, Z+13	; 0x0d
     b32:	96 85       	ldd	r25, Z+14	; 0x0e
     b34:	7c df       	rcall	.-264    	; 0xa2e <NWK_RouteFindEntry>
     b36:	fc 01       	movw	r30, r24

  if (entry)
     b38:	89 2b       	or	r24, r25
     b3a:	a1 f0       	breq	.+40     	; 0xb64 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     b3c:	8f 81       	ldd	r24, Y+7	; 0x07
     b3e:	98 85       	ldd	r25, Y+8	; 0x08
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	f9 f4       	brne	.+62     	; 0xb82 <nwkRouteFrameReceived+0x7a>
     b44:	20 91 92 18 	lds	r18, 0x1892	; 0x801892 <nwkIb>
     b48:	30 91 93 18 	lds	r19, 0x1893	; 0x801893 <nwkIb+0x1>
     b4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b4e:	98 89       	ldd	r25, Y+16	; 0x10
     b50:	28 17       	cp	r18, r24
     b52:	39 07       	cpc	r19, r25
     b54:	b1 f4       	brne	.+44     	; 0xb82 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     b56:	14 83       	std	Z+4, r17	; 0x04
     b58:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     b5a:	80 81       	ld	r24, Z
     b5c:	8f 70       	andi	r24, 0x0F	; 15
     b5e:	80 63       	ori	r24, 0x30	; 48
     b60:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     b62:	0a c0       	rjmp	.+20     	; 0xb78 <nwkRouteFrameReceived+0x70>
     b64:	96 df       	rcall	.-212    	; 0xa92 <NWK_RouteNewEntry>
     b66:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     b68:	8d 85       	ldd	r24, Y+13	; 0x0d
     b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b6c:	92 83       	std	Z+2, r25	; 0x02
     b6e:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	94 83       	std	Z+4, r25	; 0x04
     b76:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     b78:	cd 57       	subi	r28, 0x7D	; 125
     b7a:	df 4f       	sbci	r29, 0xFF	; 255
     b7c:	88 81       	ld	r24, Y
     b7e:	86 83       	std	Z+6, r24	; 0x06
     b80:	0d c0       	rjmp	.+26     	; 0xb9c <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     b82:	83 81       	ldd	r24, Z+3	; 0x03
     b84:	94 81       	ldd	r25, Z+4	; 0x04
     b86:	08 17       	cp	r16, r24
     b88:	19 07       	cpc	r17, r25
     b8a:	b1 f3       	breq	.-20     	; 0xb78 <nwkRouteFrameReceived+0x70>
     b8c:	96 81       	ldd	r25, Z+6	; 0x06
     b8e:	de 01       	movw	r26, r28
     b90:	ad 57       	subi	r26, 0x7D	; 125
     b92:	bf 4f       	sbci	r27, 0xFF	; 255
     b94:	8c 91       	ld	r24, X
     b96:	98 17       	cp	r25, r24
     b98:	f0 f2       	brcs	.-68     	; 0xb56 <nwkRouteFrameReceived+0x4e>
     b9a:	ee cf       	rjmp	.-36     	; 0xb78 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	08 95       	ret

00000ba6 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     bac:	87 85       	ldd	r24, Z+15	; 0x0f
     bae:	90 89       	ldd	r25, Z+16	; 0x10
     bb0:	8f 3f       	cpi	r24, 0xFF	; 255
     bb2:	2f ef       	ldi	r18, 0xFF	; 255
     bb4:	92 07       	cpc	r25, r18
     bb6:	d9 f1       	breq	.+118    	; 0xc2e <nwkRouteFrameSent+0x88>
     bb8:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     bba:	63 85       	ldd	r22, Z+11	; 0x0b
     bbc:	63 fb       	bst	r22, 3
     bbe:	66 27       	eor	r22, r22
     bc0:	60 f9       	bld	r22, 0
     bc2:	35 df       	rcall	.-406    	; 0xa2e <NWK_RouteFindEntry>
     bc4:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     bc6:	89 2b       	or	r24, r25
     bc8:	91 f1       	breq	.+100    	; 0xc2e <nwkRouteFrameSent+0x88>
     bca:	8c 91       	ld	r24, X
     bcc:	80 fd       	sbrc	r24, 0
     bce:	2f c0       	rjmp	.+94     	; 0xc2e <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     bd0:	fe 01       	movw	r30, r28
     bd2:	ed 57       	subi	r30, 0x7D	; 125
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	80 81       	ld	r24, Z
     bd8:	81 11       	cpse	r24, r1
     bda:	19 c0       	rjmp	.+50     	; 0xc0e <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     bdc:	8c 91       	ld	r24, X
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	80 63       	ori	r24, 0x30	; 48
     be2:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     be4:	15 96       	adiw	r26, 0x05	; 5
     be6:	8c 91       	ld	r24, X
     be8:	15 97       	sbiw	r26, 0x05	; 5
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	15 96       	adiw	r26, 0x05	; 5
     bee:	8c 93       	st	X, r24
     bf0:	8f 3f       	cpi	r24, 0xFF	; 255
     bf2:	e9 f4       	brne	.+58     	; 0xc2e <nwkRouteFrameSent+0x88>
     bf4:	ec ee       	ldi	r30, 0xEC	; 236
     bf6:	f4 e1       	ldi	r31, 0x14	; 20
     bf8:	28 ea       	ldi	r18, 0xA8	; 168
     bfa:	37 e1       	ldi	r19, 0x17	; 23
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     bfc:	80 81       	ld	r24, Z
     bfe:	86 95       	lsr	r24
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	80 83       	st	Z, r24
     c04:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     c06:	e2 17       	cp	r30, r18
     c08:	f3 07       	cpc	r31, r19
     c0a:	c1 f7       	brne	.-16     	; 0xbfc <nwkRouteFrameSent+0x56>
     c0c:	10 c0       	rjmp	.+32     	; 0xc2e <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     c0e:	9c 91       	ld	r25, X
     c10:	89 2f       	mov	r24, r25
     c12:	82 95       	swap	r24
     c14:	8f 70       	andi	r24, 0x0F	; 15
     c16:	81 5f       	subi	r24, 0xF1	; 241
     c18:	8f 70       	andi	r24, 0x0F	; 15
     c1a:	28 2f       	mov	r18, r24
     c1c:	22 95       	swap	r18
     c1e:	20 7f       	andi	r18, 0xF0	; 240
     c20:	9f 70       	andi	r25, 0x0F	; 15
     c22:	92 2b       	or	r25, r18
     c24:	9c 93       	st	X, r25
     c26:	81 11       	cpse	r24, r1
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     c2a:	cd 01       	movw	r24, r26
     c2c:	54 df       	rcall	.-344    	; 0xad6 <NWK_RouteFreeEntry>
  }
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c3a:	87 85       	ldd	r24, Z+15	; 0x0f
     c3c:	90 89       	ldd	r25, Z+16	; 0x10
     c3e:	8f 3f       	cpi	r24, 0xFF	; 255
     c40:	2f ef       	ldi	r18, 0xFF	; 255
     c42:	92 07       	cpc	r25, r18
     c44:	29 f4       	brne	.+10     	; 0xc50 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	9f ef       	ldi	r25, 0xFF	; 255
     c4a:	90 87       	std	Z+8, r25	; 0x08
     c4c:	87 83       	std	Z+7, r24	; 0x07
     c4e:	0e c0       	rjmp	.+28     	; 0xc6c <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     c50:	23 85       	ldd	r18, Z+11	; 0x0b
     c52:	22 ff       	sbrs	r18, 2
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     c56:	90 87       	std	Z+8, r25	; 0x08
     c58:	87 83       	std	Z+7, r24	; 0x07
     c5a:	08 c0       	rjmp	.+16     	; 0xc6c <nwkRoutePrepareTx+0x38>
     c5c:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     c5e:	63 85       	ldd	r22, Z+11	; 0x0b
     c60:	63 fb       	bst	r22, 3
     c62:	66 27       	eor	r22, r22
     c64:	60 f9       	bld	r22, 0
     c66:	41 df       	rcall	.-382    	; 0xaea <NWK_RouteNextHop>
     c68:	98 87       	std	Y+8, r25	; 0x08
     c6a:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     c72:	af 92       	push	r10
     c74:	bf 92       	push	r11
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     c86:	1b 85       	ldd	r17, Y+11	; 0x0b
     c88:	13 fb       	bst	r17, 3
     c8a:	11 27       	eor	r17, r17
     c8c:	10 f9       	bld	r17, 0
     c8e:	cf 84       	ldd	r12, Y+15	; 0x0f
     c90:	d8 88       	ldd	r13, Y+16	; 0x10
     c92:	61 2f       	mov	r22, r17
     c94:	c6 01       	movw	r24, r12
     c96:	29 df       	rcall	.-430    	; 0xaea <NWK_RouteNextHop>
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	59 f0       	breq	.+22     	; 0xcb2 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     c9c:	fe 01       	movw	r30, r28
     c9e:	e9 57       	subi	r30, 0x79	; 121
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	11 82       	std	Z+1, r1	; 0x01
     ca4:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     cac:	ce 01       	movw	r24, r28
     cae:	6e d3       	rcall	.+1756   	; 0x138c <nwkTxFrame>
     cb0:	22 c0       	rjmp	.+68     	; 0xcf6 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     cb2:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     cb4:	be 84       	ldd	r11, Y+14	; 0x0e
     cb6:	1f de       	rcall	.-962    	; 0x8f6 <nwkFrameAlloc>
     cb8:	7c 01       	movw	r14, r24
     cba:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     cbc:	d1 f0       	breq	.+52     	; 0xcf2 <nwkRouteFrame+0x80>
     cbe:	83 de       	rcall	.-762    	; 0x9c6 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     cc0:	f7 01       	movw	r30, r14
     cc2:	81 81       	ldd	r24, Z+1	; 0x01
     cc4:	8a 5f       	subi	r24, 0xFA	; 250
     cc6:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     cc8:	e9 57       	subi	r30, 0x79	; 121
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	11 82       	std	Z+1, r1	; 0x01
     cce:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     cd0:	f7 01       	movw	r30, r14
     cd2:	b0 8a       	std	Z+16, r11	; 0x10
     cd4:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     cd6:	ef 57       	subi	r30, 0x7F	; 127
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	01 90       	ld	r0, Z+
     cdc:	f0 81       	ld	r31, Z
     cde:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 83       	st	Z, r24
  command->srcAddr = src;
     ce4:	b2 82       	std	Z+2, r11	; 0x02
     ce6:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     ce8:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     cea:	c3 82       	std	Z+3, r12	; 0x03
     cec:	15 83       	std	Z+5, r17	; 0x05
     cee:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     cf0:	4d d3       	rcall	.+1690   	; 0x138c <nwkTxFrame>
     cf2:	ce 01       	movw	r24, r28
     cf4:	39 de       	rcall	.-910    	; 0x968 <nwkFrameFree>
  }
}
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	bf 90       	pop	r11
     d06:	af 90       	pop	r10
     d08:	08 95       	ret

00000d0a <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     d0a:	fc 01       	movw	r30, r24
     d0c:	21 85       	ldd	r18, Z+9	; 0x09
     d0e:	26 30       	cpi	r18, 0x06	; 6
     d10:	49 f4       	brne	.+18     	; 0xd24 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     d12:	07 80       	ldd	r0, Z+7	; 0x07
     d14:	f0 85       	ldd	r31, Z+8	; 0x08
     d16:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     d18:	65 81       	ldd	r22, Z+5	; 0x05
     d1a:	83 81       	ldd	r24, Z+3	; 0x03
     d1c:	94 81       	ldd	r25, Z+4	; 0x04
     d1e:	ef de       	rcall	.-546    	; 0xafe <nwkRouteRemove>

  return true;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     d24:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     d26:	08 95       	ret

00000d28 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     d28:	dc 01       	movw	r26, r24
     d2a:	19 96       	adiw	r26, 0x09	; 9
     d2c:	2c 91       	ld	r18, X
     d2e:	19 97       	sbiw	r26, 0x09	; 9
     d30:	22 23       	and	r18, r18
     d32:	71 f0       	breq	.+28     	; 0xd50 <nwkRxServiceDataInd+0x28>
     d34:	17 96       	adiw	r26, 0x07	; 7
     d36:	ed 91       	ld	r30, X+
     d38:	fc 91       	ld	r31, X
     d3a:	18 97       	sbiw	r26, 0x08	; 8
     d3c:	20 81       	ld	r18, Z
     d3e:	22 23       	and	r18, r18
     d40:	19 f0       	breq	.+6      	; 0xd48 <nwkRxServiceDataInd+0x20>
     d42:	21 30       	cpi	r18, 0x01	; 1
     d44:	19 f0       	breq	.+6      	; 0xd4c <nwkRxServiceDataInd+0x24>
     d46:	06 c0       	rjmp	.+12     	; 0xd54 <nwkRxServiceDataInd+0x2c>
     d48:	b2 c3       	rjmp	.+1892   	; 0x14ae <nwkTxAckReceived>
     d4a:	08 95       	ret
     d4c:	de cf       	rjmp	.-68     	; 0xd0a <nwkRouteErrorReceived>
     d4e:	08 95       	ret
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	08 95       	ret
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	08 95       	ret

00000d58 <nwkRxDuplicateRejectionTimerHandler>:
     d58:	bc 01       	movw	r22, r24
     d5a:	e5 eb       	ldi	r30, 0xB5	; 181
     d5c:	f7 e1       	ldi	r31, 0x17	; 23
     d5e:	27 ee       	ldi	r18, 0xE7	; 231
     d60:	37 e1       	ldi	r19, 0x17	; 23
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	51 e0       	ldi	r21, 0x01	; 1
     d66:	90 81       	ld	r25, Z
     d68:	99 23       	and	r25, r25
     d6a:	19 f0       	breq	.+6      	; 0xd72 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     d6c:	91 50       	subi	r25, 0x01	; 1
     d6e:	90 83       	st	Z, r25
     d70:	45 2f       	mov	r20, r21
     d72:	35 96       	adiw	r30, 0x05	; 5
     d74:	e2 17       	cp	r30, r18
     d76:	f3 07       	cpc	r31, r19
     d78:	b1 f7       	brne	.-20     	; 0xd66 <nwkRxDuplicateRejectionTimerHandler+0xe>
     d7a:	44 23       	and	r20, r20
     d7c:	11 f0       	breq	.+4      	; 0xd82 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     d7e:	cb 01       	movw	r24, r22
     d80:	30 c6       	rjmp	.+3168   	; 0x19e2 <SYS_TimerStart>
     d82:	08 95       	ret

00000d84 <nwkRxInit>:
     d84:	e5 eb       	ldi	r30, 0xB5	; 181
     d86:	f7 e1       	ldi	r31, 0x17	; 23
     d88:	87 ee       	ldi	r24, 0xE7	; 231
     d8a:	97 e1       	ldi	r25, 0x17	; 23
     d8c:	10 82       	st	Z, r1
     d8e:	35 96       	adiw	r30, 0x05	; 5
     d90:	e8 17       	cp	r30, r24
     d92:	f9 07       	cpc	r31, r25
     d94:	d9 f7       	brne	.-10     	; 0xd8c <nwkRxInit+0x8>
     d96:	e3 ea       	ldi	r30, 0xA3	; 163
     d98:	f7 e1       	ldi	r31, 0x17	; 23
     d9a:	84 e6       	ldi	r24, 0x64	; 100
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	a0 e0       	ldi	r26, 0x00	; 0
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	86 83       	std	Z+6, r24	; 0x06
     da4:	97 83       	std	Z+7, r25	; 0x07
     da6:	a0 87       	std	Z+8, r26	; 0x08
     da8:	b1 87       	std	Z+9, r27	; 0x09
     daa:	12 86       	std	Z+10, r1	; 0x0a
     dac:	8c ea       	ldi	r24, 0xAC	; 172
     dae:	96 e0       	ldi	r25, 0x06	; 6
     db0:	94 87       	std	Z+12, r25	; 0x0c
     db2:	83 87       	std	Z+11, r24	; 0x0b
     db4:	64 e9       	ldi	r22, 0x94	; 148
     db6:	76 e0       	ldi	r23, 0x06	; 6
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	96 cc       	rjmp	.-1748   	; 0x6e8 <NWK_OpenEndpoint>
     dbc:	08 95       	ret

00000dbe <PHY_DataInd>:
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	dc 01       	movw	r26, r24
     dc4:	ed 91       	ld	r30, X+
     dc6:	fc 91       	ld	r31, X
     dc8:	11 97       	sbiw	r26, 0x01	; 1
     dca:	21 81       	ldd	r18, Z+1	; 0x01
     dcc:	28 38       	cpi	r18, 0x88	; 136
     dce:	f1 f4       	brne	.+60     	; 0xe0c <PHY_DataInd+0x4e>
     dd0:	20 81       	ld	r18, Z
     dd2:	2f 7d       	andi	r18, 0xDF	; 223
     dd4:	21 34       	cpi	r18, 0x41	; 65
     dd6:	d1 f4       	brne	.+52     	; 0xe0c <PHY_DataInd+0x4e>
     dd8:	12 96       	adiw	r26, 0x02	; 2
     dda:	2c 91       	ld	r18, X
     ddc:	20 31       	cpi	r18, 0x10	; 16
     dde:	b0 f0       	brcs	.+44     	; 0xe0c <PHY_DataInd+0x4e>
     de0:	ec 01       	movw	r28, r24
     de2:	89 dd       	rcall	.-1262   	; 0x8f6 <nwkFrameAlloc>
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	91 f0       	breq	.+36     	; 0xe0c <PHY_DataInd+0x4e>
     de8:	20 e2       	ldi	r18, 0x20	; 32
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
     dee:	2a 81       	ldd	r18, Y+2	; 0x02
     df0:	21 83       	std	Z+1, r18	; 0x01
     df2:	2b 81       	ldd	r18, Y+3	; 0x03
     df4:	ed 57       	subi	r30, 0x7D	; 125
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	20 83       	st	Z, r18
     dfa:	2c 81       	ldd	r18, Y+4	; 0x04
     dfc:	31 96       	adiw	r30, 0x01	; 1
     dfe:	20 83       	st	Z, r18
     e00:	4a 81       	ldd	r20, Y+2	; 0x02
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	68 81       	ld	r22, Y
     e06:	79 81       	ldd	r23, Y+1	; 0x01
     e08:	02 96       	adiw	r24, 0x02	; 2
     e0a:	34 d7       	rcall	.+3688   	; 0x1c74 <memcpy>
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     e12:	2f 92       	push	r2
     e14:	3f 92       	push	r3
     e16:	4f 92       	push	r4
     e18:	5f 92       	push	r5
     e1a:	6f 92       	push	r6
     e1c:	7f 92       	push	r7
     e1e:	8f 92       	push	r8
     e20:	9f 92       	push	r9
     e22:	af 92       	push	r10
     e24:	bf 92       	push	r11
     e26:	cf 92       	push	r12
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	2c 97       	sbiw	r28, 0x0c	; 12
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     e46:	00 e0       	ldi	r16, 0x00	; 0
     e48:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     e4a:	0f 2e       	mov	r0, r31
     e4c:	f4 e2       	ldi	r31, 0x24	; 36
     e4e:	bf 2e       	mov	r11, r31
     e50:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     e52:	0f 2e       	mov	r0, r31
     e54:	f2 e9       	ldi	r31, 0x92	; 146
     e56:	ef 2e       	mov	r14, r31
     e58:	f8 e1       	ldi	r31, 0x18	; 24
     e5a:	ff 2e       	mov	r15, r31
     e5c:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     e5e:	55 24       	eor	r5, r5
     e60:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     e62:	68 94       	set
     e64:	aa 24       	eor	r10, r10
     e66:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     e68:	68 94       	set
     e6a:	77 24       	eor	r7, r7
     e6c:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     e6e:	68 94       	set
     e70:	66 24       	eor	r6, r6
     e72:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     e74:	31 2c       	mov	r3, r1
     e76:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     e78:	0f 2e       	mov	r0, r31
     e7a:	ff e1       	ldi	r31, 0x1F	; 31
     e7c:	4f 2e       	mov	r4, r31
     e7e:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     e80:	cc 24       	eor	r12, r12
     e82:	c3 94       	inc	r12
     e84:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     e86:	da c1       	rjmp	.+948    	; 0x123c <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     e88:	d8 01       	movw	r26, r16
     e8a:	8c 91       	ld	r24, X
     e8c:	82 32       	cpi	r24, 0x22	; 34
     e8e:	09 f4       	brne	.+2      	; 0xe92 <nwkRxTaskHandler+0x80>
     e90:	05 c1       	rjmp	.+522    	; 0x109c <nwkRxTaskHandler+0x28a>
     e92:	18 f4       	brcc	.+6      	; 0xe9a <nwkRxTaskHandler+0x88>
     e94:	80 32       	cpi	r24, 0x20	; 32
     e96:	41 f0       	breq	.+16     	; 0xea8 <nwkRxTaskHandler+0x96>
     e98:	d1 c1       	rjmp	.+930    	; 0x123c <nwkRxTaskHandler+0x42a>
     e9a:	83 32       	cpi	r24, 0x23	; 35
     e9c:	09 f4       	brne	.+2      	; 0xea0 <nwkRxTaskHandler+0x8e>
     e9e:	c9 c1       	rjmp	.+914    	; 0x1232 <nwkRxTaskHandler+0x420>
     ea0:	84 32       	cpi	r24, 0x24	; 36
     ea2:	09 f4       	brne	.+2      	; 0xea6 <nwkRxTaskHandler+0x94>
     ea4:	c9 c1       	rjmp	.+914    	; 0x1238 <nwkRxTaskHandler+0x426>
     ea6:	ca c1       	rjmp	.+916    	; 0x123c <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     ea8:	f8 01       	movw	r30, r16
     eaa:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     eac:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     eae:	98 2f       	mov	r25, r24
     eb0:	9a 70       	andi	r25, 0x0A	; 10
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <nwkRxTaskHandler+0xa4>
     eb4:	c3 c1       	rjmp	.+902    	; 0x123c <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     eb6:	25 81       	ldd	r18, Z+5	; 0x05
     eb8:	36 81       	ldd	r19, Z+6	; 0x06
     eba:	2f 3f       	cpi	r18, 0xFF	; 255
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	91 f4       	brne	.+36     	; 0xee4 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     ec0:	d8 01       	movw	r26, r16
     ec2:	1f 96       	adiw	r26, 0x0f	; 15
     ec4:	8d 91       	ld	r24, X+
     ec6:	9c 91       	ld	r25, X
     ec8:	50 97       	sbiw	r26, 0x10	; 16
     eca:	f7 01       	movw	r30, r14
     ecc:	20 81       	ld	r18, Z
     ece:	31 81       	ldd	r19, Z+1	; 0x01
     ed0:	28 17       	cp	r18, r24
     ed2:	39 07       	cpc	r19, r25
     ed4:	19 f0       	breq	.+6      	; 0xedc <nwkRxTaskHandler+0xca>
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	09 f0       	breq	.+2      	; 0xedc <nwkRxTaskHandler+0xca>
     eda:	b0 c1       	rjmp	.+864    	; 0x123c <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     edc:	e2 e2       	ldi	r30, 0x22	; 34
     ede:	d8 01       	movw	r26, r16
     ee0:	ec 93       	st	X, r30
     ee2:	ac c1       	rjmp	.+856    	; 0x123c <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     ee4:	d8 01       	movw	r26, r16
     ee6:	1f 96       	adiw	r26, 0x0f	; 15
     ee8:	2d 91       	ld	r18, X+
     eea:	3c 91       	ld	r19, X
     eec:	50 97       	sbiw	r26, 0x10	; 16
     eee:	2f 3f       	cpi	r18, 0xFF	; 255
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	11 f4       	brne	.+4      	; 0xef8 <nwkRxTaskHandler+0xe6>
     ef4:	80 fd       	sbrc	r24, 0
     ef6:	a2 c1       	rjmp	.+836    	; 0x123c <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     ef8:	f7 01       	movw	r30, r14
     efa:	20 81       	ld	r18, Z
     efc:	31 81       	ldd	r19, Z+1	; 0x01
     efe:	d8 01       	movw	r26, r16
     f00:	1d 96       	adiw	r26, 0x0d	; 13
     f02:	8d 91       	ld	r24, X+
     f04:	9c 91       	ld	r25, X
     f06:	1e 97       	sbiw	r26, 0x0e	; 14
     f08:	28 17       	cp	r18, r24
     f0a:	39 07       	cpc	r19, r25
     f0c:	09 f4       	brne	.+2      	; 0xf10 <nwkRxTaskHandler+0xfe>
     f0e:	96 c1       	rjmp	.+812    	; 0x123c <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     f10:	c8 01       	movw	r24, r16
     f12:	fa dd       	rcall	.-1036   	; 0xb08 <nwkRouteFrameReceived>
     f14:	e1 eb       	ldi	r30, 0xB1	; 177
     f16:	f7 e1       	ldi	r31, 0x17	; 23
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     f1c:	83 2c       	mov	r8, r3
     f1e:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     f20:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     f22:	44 81       	ldd	r20, Z+4	; 0x04
     f24:	44 23       	and	r20, r20
     f26:	09 f4       	brne	.+2      	; 0xf2a <nwkRxTaskHandler+0x118>
     f28:	74 c0       	rjmp	.+232    	; 0x1012 <nwkRxTaskHandler+0x200>
     f2a:	d8 01       	movw	r26, r16
     f2c:	1d 96       	adiw	r26, 0x0d	; 13
     f2e:	6d 91       	ld	r22, X+
     f30:	7c 91       	ld	r23, X
     f32:	1e 97       	sbiw	r26, 0x0e	; 14
     f34:	40 81       	ld	r20, Z
     f36:	51 81       	ldd	r21, Z+1	; 0x01
     f38:	64 17       	cp	r22, r20
     f3a:	75 07       	cpc	r23, r21
     f3c:	09 f0       	breq	.+2      	; 0xf40 <nwkRxTaskHandler+0x12e>
     f3e:	6a c0       	rjmp	.+212    	; 0x1014 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     f40:	1c 96       	adiw	r26, 0x0c	; 12
     f42:	8c 91       	ld	r24, X
     f44:	1c 97       	sbiw	r26, 0x0c	; 12
     f46:	f9 01       	movw	r30, r18
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	e2 0f       	add	r30, r18
     f52:	f3 1f       	adc	r31, r19
     f54:	ef 54       	subi	r30, 0x4F	; 79
     f56:	f8 4e       	sbci	r31, 0xE8	; 232
     f58:	92 81       	ldd	r25, Z+2	; 0x02
     f5a:	98 1b       	sub	r25, r24

      if (diff < 8)
     f5c:	98 30       	cpi	r25, 0x08	; 8
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <nwkRxTaskHandler+0x150>
     f60:	3e c0       	rjmp	.+124    	; 0xfde <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     f62:	f9 01       	movw	r30, r18
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	ee 0f       	add	r30, r30
     f6a:	ff 1f       	adc	r31, r31
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	ef 54       	subi	r30, 0x4F	; 79
     f72:	f8 4e       	sbci	r31, 0xE8	; 232
     f74:	83 81       	ldd	r24, Z+3	; 0x03
     f76:	48 2f       	mov	r20, r24
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	09 2e       	mov	r0, r25
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <nwkRxTaskHandler+0x170>
     f7e:	55 95       	asr	r21
     f80:	47 95       	ror	r20
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <nwkRxTaskHandler+0x16c>
     f86:	40 ff       	sbrs	r20, 0
     f88:	17 c0       	rjmp	.+46     	; 0xfb8 <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     f8a:	f7 01       	movw	r30, r14
     f8c:	20 81       	ld	r18, Z
     f8e:	31 81       	ldd	r19, Z+1	; 0x01
     f90:	17 96       	adiw	r26, 0x07	; 7
     f92:	8d 91       	ld	r24, X+
     f94:	9c 91       	ld	r25, X
     f96:	18 97       	sbiw	r26, 0x08	; 8
     f98:	28 17       	cp	r18, r24
     f9a:	39 07       	cpc	r19, r25
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <nwkRxTaskHandler+0x18e>
     f9e:	4e c1       	rjmp	.+668    	; 0x123c <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     fa0:	1b 96       	adiw	r26, 0x0b	; 11
     fa2:	6c 91       	ld	r22, X
     fa4:	1b 97       	sbiw	r26, 0x0b	; 11
     fa6:	63 fb       	bst	r22, 3
     fa8:	66 27       	eor	r22, r22
     faa:	60 f9       	bld	r22, 0
     fac:	1f 96       	adiw	r26, 0x0f	; 15
     fae:	8d 91       	ld	r24, X+
     fb0:	9c 91       	ld	r25, X
     fb2:	50 97       	sbiw	r26, 0x10	; 16
     fb4:	a4 dd       	rcall	.-1208   	; 0xafe <nwkRouteRemove>
     fb6:	42 c1       	rjmp	.+644    	; 0x123c <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     fb8:	f9 01       	movw	r30, r18
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	2e 0f       	add	r18, r30
     fc4:	3f 1f       	adc	r19, r31
     fc6:	f9 01       	movw	r30, r18
     fc8:	ef 54       	subi	r30, 0x4F	; 79
     fca:	f8 4e       	sbci	r31, 0xE8	; 232
     fcc:	96 01       	movw	r18, r12
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <nwkRxTaskHandler+0x1c2>
     fd0:	22 0f       	add	r18, r18
     fd2:	33 1f       	adc	r19, r19
     fd4:	9a 95       	dec	r25
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <nwkRxTaskHandler+0x1be>
     fd8:	82 2b       	or	r24, r18
     fda:	83 83       	std	Z+3, r24	; 0x03
     fdc:	36 c1       	rjmp	.+620    	; 0x124a <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     fde:	f9 01       	movw	r30, r18
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	2e 0f       	add	r18, r30
     fea:	3f 1f       	adc	r19, r31
     fec:	f9 01       	movw	r30, r18
     fee:	ef 54       	subi	r30, 0x4F	; 79
     ff0:	f8 4e       	sbci	r31, 0xE8	; 232
     ff2:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     ff4:	83 81       	ldd	r24, Z+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	91 95       	neg	r25
     ffc:	a9 01       	movw	r20, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <nwkRxTaskHandler+0x1f2>
    1000:	44 0f       	add	r20, r20
    1002:	55 1f       	adc	r21, r21
    1004:	9a 95       	dec	r25
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <nwkRxTaskHandler+0x1ee>
    1008:	ca 01       	movw	r24, r20
    100a:	81 60       	ori	r24, 0x01	; 1
    100c:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    100e:	44 82       	std	Z+4, r4	; 0x04
    1010:	1c c1       	rjmp	.+568    	; 0x124a <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    1012:	4f 01       	movw	r8, r30
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1018:	8a 30       	cpi	r24, 0x0A	; 10
    101a:	91 05       	cpc	r25, r1
    101c:	09 f0       	breq	.+2      	; 0x1020 <nwkRxTaskHandler+0x20e>
    101e:	80 cf       	rjmp	.-256    	; 0xf20 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1020:	81 14       	cp	r8, r1
    1022:	91 04       	cpc	r9, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <nwkRxTaskHandler+0x216>
    1026:	0a c1       	rjmp	.+532    	; 0x123c <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1028:	d8 01       	movw	r26, r16
    102a:	1d 96       	adiw	r26, 0x0d	; 13
    102c:	8d 91       	ld	r24, X+
    102e:	9c 91       	ld	r25, X
    1030:	1e 97       	sbiw	r26, 0x0e	; 14
    1032:	f4 01       	movw	r30, r8
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    1038:	1c 96       	adiw	r26, 0x0c	; 12
    103a:	8c 91       	ld	r24, X
    103c:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    103e:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1040:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1042:	83 ea       	ldi	r24, 0xA3	; 163
    1044:	97 e1       	ldi	r25, 0x17	; 23
    1046:	cd d4       	rcall	.+2458   	; 0x19e2 <SYS_TimerStart>
    1048:	00 c1       	rjmp	.+512    	; 0x124a <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    104a:	d7 01       	movw	r26, r14
    104c:	2d 91       	ld	r18, X+
    104e:	3c 91       	ld	r19, X
    1050:	f8 01       	movw	r30, r16
    1052:	87 85       	ldd	r24, Z+15	; 0x0f
    1054:	90 89       	ldd	r25, Z+16	; 0x10
    1056:	28 17       	cp	r18, r24
    1058:	39 07       	cpc	r19, r25
    105a:	81 f0       	breq	.+32     	; 0x107c <nwkRxTaskHandler+0x26a>
    105c:	43 85       	ldd	r20, Z+11	; 0x0b
    105e:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1060:	0b c0       	rjmp	.+22     	; 0x1078 <nwkRxTaskHandler+0x266>
    1062:	c8 01       	movw	r24, r16
    1064:	e1 d1       	rcall	.+962    	; 0x1428 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1066:	d7 01       	movw	r26, r14
    1068:	2d 91       	ld	r18, X+
    106a:	3c 91       	ld	r19, X
    106c:	f8 01       	movw	r30, r16
    106e:	87 85       	ldd	r24, Z+15	; 0x0f
    1070:	90 89       	ldd	r25, Z+16	; 0x10
    1072:	28 17       	cp	r18, r24
    1074:	39 07       	cpc	r19, r25
    1076:	11 f0       	breq	.+4      	; 0x107c <nwkRxTaskHandler+0x26a>
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	21 f4       	brne	.+8      	; 0x1084 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    107c:	e2 e2       	ldi	r30, 0x22	; 34
    107e:	d8 01       	movw	r26, r16
    1080:	ec 93       	st	X, r30
    1082:	dc c0       	rjmp	.+440    	; 0x123c <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    1084:	d8 01       	movw	r26, r16
    1086:	17 96       	adiw	r26, 0x07	; 7
    1088:	8d 91       	ld	r24, X+
    108a:	9c 91       	ld	r25, X
    108c:	18 97       	sbiw	r26, 0x08	; 8
    108e:	82 17       	cp	r24, r18
    1090:	93 07       	cpc	r25, r19
    1092:	09 f0       	breq	.+2      	; 0x1096 <nwkRxTaskHandler+0x284>
    1094:	d3 c0       	rjmp	.+422    	; 0x123c <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1096:	e3 e2       	ldi	r30, 0x23	; 35
    1098:	ec 93       	st	X, r30
    109a:	d0 c0       	rjmp	.+416    	; 0x123c <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    109c:	10 92 b0 17 	sts	0x17B0, r1	; 0x8017b0 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    10a0:	d8 01       	movw	r26, r16
    10a2:	51 96       	adiw	r26, 0x11	; 17
    10a4:	8c 91       	ld	r24, X
    10a6:	51 97       	sbiw	r26, 0x11	; 17
    10a8:	82 95       	swap	r24
    10aa:	8f 70       	andi	r24, 0x0F	; 15
    10ac:	e8 2f       	mov	r30, r24
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	e8 56       	subi	r30, 0x68	; 104
    10b6:	f7 4e       	sbci	r31, 0xE7	; 231
    10b8:	01 90       	ld	r0, Z+
    10ba:	f0 81       	ld	r31, Z
    10bc:	e0 2d       	mov	r30, r0
    10be:	30 97       	sbiw	r30, 0x00	; 0
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <nwkRxTaskHandler+0x2b2>
    10c2:	60 c0       	rjmp	.+192    	; 0x1184 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    10c4:	1d 96       	adiw	r26, 0x0d	; 13
    10c6:	2d 91       	ld	r18, X+
    10c8:	3c 91       	ld	r19, X
    10ca:	1e 97       	sbiw	r26, 0x0e	; 14
    10cc:	3a 83       	std	Y+2, r19	; 0x02
    10ce:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    10d0:	1f 96       	adiw	r26, 0x0f	; 15
    10d2:	4d 91       	ld	r20, X+
    10d4:	5c 91       	ld	r21, X
    10d6:	50 97       	sbiw	r26, 0x10	; 16
    10d8:	5c 83       	std	Y+4, r21	; 0x04
    10da:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    10dc:	51 96       	adiw	r26, 0x11	; 17
    10de:	9c 91       	ld	r25, X
    10e0:	51 97       	sbiw	r26, 0x11	; 17
    10e2:	9f 70       	andi	r25, 0x0F	; 15
    10e4:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    10e6:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    10e8:	af 57       	subi	r26, 0x7F	; 127
    10ea:	bf 4f       	sbci	r27, 0xFF	; 255
    10ec:	8d 91       	ld	r24, X+
    10ee:	9c 91       	ld	r25, X
    10f0:	99 87       	std	Y+9, r25	; 0x09
    10f2:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    10f4:	b8 01       	movw	r22, r16
    10f6:	6e 5f       	subi	r22, 0xFE	; 254
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    10fa:	86 1b       	sub	r24, r22
    10fc:	97 0b       	sbc	r25, r23
    10fe:	d8 01       	movw	r26, r16
    1100:	11 96       	adiw	r26, 0x01	; 1
    1102:	9c 91       	ld	r25, X
    1104:	11 97       	sbiw	r26, 0x01	; 1
    1106:	98 1b       	sub	r25, r24
    1108:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    110a:	ad 57       	subi	r26, 0x7D	; 125
    110c:	bf 4f       	sbci	r27, 0xFF	; 255
    110e:	8c 91       	ld	r24, X
    1110:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    1112:	11 96       	adiw	r26, 0x01	; 1
    1114:	8c 91       	ld	r24, X
    1116:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1118:	d8 01       	movw	r26, r16
    111a:	1b 96       	adiw	r26, 0x0b	; 11
    111c:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    111e:	69 2f       	mov	r22, r25
    1120:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1122:	92 fd       	sbrc	r25, 2
    1124:	02 c0       	rjmp	.+4      	; 0x112a <nwkRxTaskHandler+0x318>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	01 c0       	rjmp	.+2      	; 0x112c <nwkRxTaskHandler+0x31a>
    112a:	80 e2       	ldi	r24, 0x20	; 32
    112c:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    112e:	93 fd       	sbrc	r25, 3
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <nwkRxTaskHandler+0x324>
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <nwkRxTaskHandler+0x326>
    1136:	90 e4       	ldi	r25, 0x40	; 64
    1138:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    113a:	4f 3f       	cpi	r20, 0xFF	; 255
    113c:	5f 4f       	sbci	r21, 0xFF	; 255
    113e:	11 f0       	breq	.+4      	; 0x1144 <nwkRxTaskHandler+0x332>
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <nwkRxTaskHandler+0x334>
    1144:	96 2d       	mov	r25, r6
    1146:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1148:	d8 01       	movw	r26, r16
    114a:	19 96       	adiw	r26, 0x09	; 9
    114c:	4d 91       	ld	r20, X+
    114e:	5c 91       	ld	r21, X
    1150:	1a 97       	sbiw	r26, 0x0a	; 10
    1152:	24 17       	cp	r18, r20
    1154:	35 07       	cpc	r19, r21
    1156:	11 f0       	breq	.+4      	; 0x115c <nwkRxTaskHandler+0x34a>
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	01 c0       	rjmp	.+2      	; 0x115e <nwkRxTaskHandler+0x34c>
    115c:	97 2d       	mov	r25, r7
    115e:	89 2b       	or	r24, r25
    1160:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1162:	d8 01       	movw	r26, r16
    1164:	15 96       	adiw	r26, 0x05	; 5
    1166:	2d 91       	ld	r18, X+
    1168:	3c 91       	ld	r19, X
    116a:	16 97       	sbiw	r26, 0x06	; 6
    116c:	2f 3f       	cpi	r18, 0xFF	; 255
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	11 f0       	breq	.+4      	; 0x1176 <nwkRxTaskHandler+0x364>
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <nwkRxTaskHandler+0x366>
    1176:	9a 2d       	mov	r25, r10
    1178:	89 2b       	or	r24, r25
    117a:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    117c:	ce 01       	movw	r24, r28
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	19 95       	eicall
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1184:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1186:	f8 01       	movw	r30, r16
    1188:	93 85       	ldd	r25, Z+11	; 0x0b
    118a:	90 ff       	sbrs	r25, 0
    ack = false;
    118c:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    118e:	d8 01       	movw	r26, r16
    1190:	17 96       	adiw	r26, 0x07	; 7
    1192:	2d 91       	ld	r18, X+
    1194:	3c 91       	ld	r19, X
    1196:	18 97       	sbiw	r26, 0x08	; 8
    1198:	2f 3f       	cpi	r18, 0xFF	; 255
    119a:	3f 4f       	sbci	r19, 0xFF	; 255
    119c:	69 f4       	brne	.+26     	; 0x11b8 <nwkRxTaskHandler+0x3a6>
    119e:	f7 01       	movw	r30, r14
    11a0:	40 81       	ld	r20, Z
    11a2:	51 81       	ldd	r21, Z+1	; 0x01
    11a4:	d8 01       	movw	r26, r16
    11a6:	1f 96       	adiw	r26, 0x0f	; 15
    11a8:	2d 91       	ld	r18, X+
    11aa:	3c 91       	ld	r19, X
    11ac:	50 97       	sbiw	r26, 0x10	; 16
    11ae:	42 17       	cp	r20, r18
    11b0:	53 07       	cpc	r21, r19
    11b2:	11 f4       	brne	.+4      	; 0x11b8 <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    11b4:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    11b6:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    11b8:	f8 01       	movw	r30, r16
    11ba:	25 81       	ldd	r18, Z+5	; 0x05
    11bc:	36 81       	ldd	r19, Z+6	; 0x06
    11be:	2f 3f       	cpi	r18, 0xFF	; 255
    11c0:	3f 4f       	sbci	r19, 0xFF	; 255
    11c2:	a1 f1       	breq	.+104    	; 0x122c <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    11c4:	d7 01       	movw	r26, r14
    11c6:	2d 91       	ld	r18, X+
    11c8:	3c 91       	ld	r19, X
    11ca:	2f 3f       	cpi	r18, 0xFF	; 255
    11cc:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    11ce:	71 f1       	breq	.+92     	; 0x122c <nwkRxTaskHandler+0x41a>
    11d0:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    11d2:	61 f1       	breq	.+88     	; 0x122c <nwkRxTaskHandler+0x41a>
    11d4:	90 db       	rcall	.-2272   	; 0x8f6 <nwkFrameAlloc>
    11d6:	4c 01       	movw	r8, r24
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    11da:	41 f1       	breq	.+80     	; 0x122c <nwkRxTaskHandler+0x41a>
    11dc:	f4 db       	rcall	.-2072   	; 0x9c6 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    11de:	f4 01       	movw	r30, r8
    11e0:	81 81       	ldd	r24, Z+1	; 0x01
    11e2:	8d 5f       	subi	r24, 0xFD	; 253
    11e4:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    11e6:	e9 57       	subi	r30, 0x79	; 121
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	11 82       	std	Z+1, r1	; 0x01
    11ec:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    11ee:	d8 01       	movw	r26, r16
    11f0:	1b 96       	adiw	r26, 0x0b	; 11
    11f2:	8c 91       	ld	r24, X
    11f4:	1b 97       	sbiw	r26, 0x0b	; 11
    11f6:	86 95       	lsr	r24
    11f8:	81 70       	andi	r24, 0x01	; 1
    11fa:	f4 01       	movw	r30, r8
    11fc:	93 85       	ldd	r25, Z+11	; 0x0b
    11fe:	80 fb       	bst	r24, 0
    1200:	91 f9       	bld	r25, 1
    1202:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1204:	1d 96       	adiw	r26, 0x0d	; 13
    1206:	8d 91       	ld	r24, X+
    1208:	9c 91       	ld	r25, X
    120a:	1e 97       	sbiw	r26, 0x0e	; 14
    120c:	90 8b       	std	Z+16, r25	; 0x10
    120e:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    1210:	ef 57       	subi	r30, 0x7F	; 127
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	01 90       	ld	r0, Z+
    1216:	f0 81       	ld	r31, Z
    1218:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    121a:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    121c:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    1220:	82 83       	std	Z+2, r24	; 0x02
    1222:	1c 96       	adiw	r26, 0x0c	; 12
    1224:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    1226:	81 83       	std	Z+1, r24	; 0x01
    1228:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    122a:	b0 d0       	rcall	.+352    	; 0x138c <nwkTxFrame>
    122c:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    122e:	bc 92       	st	X, r11
    1230:	05 c0       	rjmp	.+10     	; 0x123c <nwkRxTaskHandler+0x42a>
    1232:	c8 01       	movw	r24, r16
      } break;
    1234:	1e dd       	rcall	.-1476   	; 0xc72 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1236:	02 c0       	rjmp	.+4      	; 0x123c <nwkRxTaskHandler+0x42a>
    1238:	c8 01       	movw	r24, r16
    123a:	96 db       	rcall	.-2260   	; 0x968 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    123c:	c8 01       	movw	r24, r16
    123e:	9e db       	rcall	.-2244   	; 0x97c <nwkFrameNext>
    1240:	8c 01       	movw	r16, r24
    1242:	89 2b       	or	r24, r25
    1244:	09 f0       	breq	.+2      	; 0x1248 <nwkRxTaskHandler+0x436>
    1246:	20 ce       	rjmp	.-960    	; 0xe88 <nwkRxTaskHandler+0x76>
    1248:	07 c0       	rjmp	.+14     	; 0x1258 <nwkRxTaskHandler+0x446>
    124a:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    124c:	87 81       	ldd	r24, Z+7	; 0x07
    124e:	90 85       	ldd	r25, Z+8	; 0x08
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	09 f0       	breq	.+2      	; 0x1256 <nwkRxTaskHandler+0x444>
    1254:	08 cf       	rjmp	.-496    	; 0x1066 <nwkRxTaskHandler+0x254>
    1256:	f9 ce       	rjmp	.-526    	; 0x104a <nwkRxTaskHandler+0x238>
    1258:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	cf 90       	pop	r12
    1274:	bf 90       	pop	r11
    1276:	af 90       	pop	r10
    1278:	9f 90       	pop	r9
    127a:	8f 90       	pop	r8
    127c:	7f 90       	pop	r7
    127e:	6f 90       	pop	r6
    1280:	5f 90       	pop	r5
    1282:	4f 90       	pop	r4
    1284:	3f 90       	pop	r3
    1286:	2f 90       	pop	r2
    1288:	08 95       	ret

0000128a <nwkTxDelayTimerHandler>:
    128a:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	7c 01       	movw	r14, r24
    1296:	10 e0       	ldi	r17, 0x00	; 0
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	01 e0       	ldi	r16, 0x01	; 1
    129e:	c3 e1       	ldi	r28, 0x13	; 19
    12a0:	13 c0       	rjmp	.+38     	; 0x12c8 <nwkTxDelayTimerHandler+0x3e>
    12a2:	fc 01       	movw	r30, r24
    12a4:	20 81       	ld	r18, Z
    12a6:	21 31       	cpi	r18, 0x11	; 17
    12a8:	79 f4       	brne	.+30     	; 0x12c8 <nwkTxDelayTimerHandler+0x3e>
    12aa:	ec 57       	subi	r30, 0x7C	; 124
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	20 81       	ld	r18, Z
    12b0:	31 81       	ldd	r19, Z+1	; 0x01
    12b2:	21 50       	subi	r18, 0x01	; 1
    12b4:	31 09       	sbc	r19, r1
    12b6:	31 83       	std	Z+1, r19	; 0x01
    12b8:	20 83       	st	Z, r18
    12ba:	23 2b       	or	r18, r19
    12bc:	21 f4       	brne	.+8      	; 0x12c6 <nwkTxDelayTimerHandler+0x3c>
    12be:	fc 01       	movw	r30, r24
    12c0:	c0 83       	st	Z, r28
    12c2:	10 2f       	mov	r17, r16
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <nwkTxDelayTimerHandler+0x3e>
    12c6:	10 2f       	mov	r17, r16
    12c8:	59 db       	rcall	.-2382   	; 0x97c <nwkFrameNext>
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	51 f7       	brne	.-44     	; 0x12a2 <nwkTxDelayTimerHandler+0x18>
    12ce:	11 23       	and	r17, r17
    12d0:	11 f0       	breq	.+4      	; 0x12d6 <nwkTxDelayTimerHandler+0x4c>
    12d2:	c7 01       	movw	r24, r14
    12d4:	86 d3       	rcall	.+1804   	; 0x19e2 <SYS_TimerStart>
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	08 95       	ret

000012e2 <nwkTxAckWaitTimerHandler>:
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	7c 01       	movw	r14, r24
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	01 e0       	ldi	r16, 0x01	; 1
    12f8:	d7 e1       	ldi	r29, 0x17	; 23
    12fa:	c0 e1       	ldi	r28, 0x10	; 16
    12fc:	16 c0       	rjmp	.+44     	; 0x132a <nwkTxAckWaitTimerHandler+0x48>
    12fe:	fc 01       	movw	r30, r24
    1300:	20 81       	ld	r18, Z
    1302:	26 31       	cpi	r18, 0x16	; 22
    1304:	91 f4       	brne	.+36     	; 0x132a <nwkTxAckWaitTimerHandler+0x48>
    1306:	ec 57       	subi	r30, 0x7C	; 124
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	20 81       	ld	r18, Z
    130c:	31 81       	ldd	r19, Z+1	; 0x01
    130e:	21 50       	subi	r18, 0x01	; 1
    1310:	31 09       	sbc	r19, r1
    1312:	31 83       	std	Z+1, r19	; 0x01
    1314:	20 83       	st	Z, r18
    1316:	23 2b       	or	r18, r19
    1318:	39 f4       	brne	.+14     	; 0x1328 <nwkTxAckWaitTimerHandler+0x46>
    131a:	fc 01       	movw	r30, r24
    131c:	d0 83       	st	Z, r29
    131e:	ed 57       	subi	r30, 0x7D	; 125
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	c0 83       	st	Z, r28
    1324:	10 2f       	mov	r17, r16
    1326:	01 c0       	rjmp	.+2      	; 0x132a <nwkTxAckWaitTimerHandler+0x48>
    1328:	10 2f       	mov	r17, r16
    132a:	28 db       	rcall	.-2480   	; 0x97c <nwkFrameNext>
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	39 f7       	brne	.-50     	; 0x12fe <nwkTxAckWaitTimerHandler+0x1c>
    1330:	11 23       	and	r17, r17
    1332:	11 f0       	breq	.+4      	; 0x1338 <nwkTxAckWaitTimerHandler+0x56>
    1334:	c7 01       	movw	r24, r14
    1336:	55 d3       	rcall	.+1706   	; 0x19e2 <SYS_TimerStart>
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	08 95       	ret

00001346 <nwkTxInit>:
    1346:	10 92 fe 17 	sts	0x17FE, r1	; 0x8017fe <nwkTxPhyActiveFrame+0x1>
    134a:	10 92 fd 17 	sts	0x17FD, r1	; 0x8017fd <nwkTxPhyActiveFrame>
    134e:	e0 ef       	ldi	r30, 0xF0	; 240
    1350:	f7 e1       	ldi	r31, 0x17	; 23
    1352:	82 e3       	ldi	r24, 0x32	; 50
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a0 e0       	ldi	r26, 0x00	; 0
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	86 83       	std	Z+6, r24	; 0x06
    135c:	97 83       	std	Z+7, r25	; 0x07
    135e:	a0 87       	std	Z+8, r26	; 0x08
    1360:	b1 87       	std	Z+9, r27	; 0x09
    1362:	12 86       	std	Z+10, r1	; 0x0a
    1364:	81 e7       	ldi	r24, 0x71	; 113
    1366:	99 e0       	ldi	r25, 0x09	; 9
    1368:	94 87       	std	Z+12, r25	; 0x0c
    136a:	83 87       	std	Z+11, r24	; 0x0b
    136c:	e3 ee       	ldi	r30, 0xE3	; 227
    136e:	f7 e1       	ldi	r31, 0x17	; 23
    1370:	8a e0       	ldi	r24, 0x0A	; 10
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a0 e0       	ldi	r26, 0x00	; 0
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	86 83       	std	Z+6, r24	; 0x06
    137a:	97 83       	std	Z+7, r25	; 0x07
    137c:	a0 87       	std	Z+8, r26	; 0x08
    137e:	b1 87       	std	Z+9, r27	; 0x09
    1380:	12 86       	std	Z+10, r1	; 0x0a
    1382:	85 e4       	ldi	r24, 0x45	; 69
    1384:	99 e0       	ldi	r25, 0x09	; 9
    1386:	94 87       	std	Z+12, r25	; 0x0c
    1388:	83 87       	std	Z+11, r24	; 0x0b
    138a:	08 95       	ret

0000138c <nwkTxFrame>:
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ec 01       	movw	r28, r24
    1392:	fc 01       	movw	r30, r24
    1394:	ea 57       	subi	r30, 0x7A	; 122
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	80 81       	ld	r24, Z
    139a:	81 ff       	sbrs	r24, 1
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <nwkTxFrame+0x18>
    139e:	92 e1       	ldi	r25, 0x12	; 18
    13a0:	98 83       	st	Y, r25
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <nwkTxFrame+0x1c>
    13a4:	92 e1       	ldi	r25, 0x12	; 18
    13a6:	98 83       	st	Y, r25
    13a8:	fe 01       	movw	r30, r28
    13aa:	ed 57       	subi	r30, 0x7D	; 125
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	10 82       	st	Z, r1
    13b0:	80 ff       	sbrs	r24, 0
    13b2:	05 c0       	rjmp	.+10     	; 0x13be <nwkTxFrame+0x32>
    13b4:	2f ef       	ldi	r18, 0xFF	; 255
    13b6:	3f ef       	ldi	r19, 0xFF	; 255
    13b8:	3e 83       	std	Y+6, r19	; 0x06
    13ba:	2d 83       	std	Y+5, r18	; 0x05
    13bc:	06 c0       	rjmp	.+12     	; 0x13ca <nwkTxFrame+0x3e>
    13be:	20 91 94 18 	lds	r18, 0x1894	; 0x801894 <nwkIb+0x2>
    13c2:	30 91 95 18 	lds	r19, 0x1895	; 0x801895 <nwkIb+0x3>
    13c6:	3e 83       	std	Y+6, r19	; 0x06
    13c8:	2d 83       	std	Y+5, r18	; 0x05
    13ca:	85 70       	andi	r24, 0x05	; 5
    13cc:	19 f4       	brne	.+6      	; 0x13d4 <nwkTxFrame+0x48>
    13ce:	ce 01       	movw	r24, r28
    13d0:	31 dc       	rcall	.-1950   	; 0xc34 <nwkRoutePrepareTx>
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <nwkTxFrame+0x50>
    13d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d6:	98 89       	ldd	r25, Y+16	; 0x10
    13d8:	98 87       	std	Y+8, r25	; 0x08
    13da:	8f 83       	std	Y+7, r24	; 0x07
    13dc:	e2 e9       	ldi	r30, 0x92	; 146
    13de:	f8 e1       	ldi	r31, 0x18	; 24
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	9a 87       	std	Y+10, r25	; 0x0a
    13e6:	89 87       	std	Y+9, r24	; 0x09
    13e8:	85 81       	ldd	r24, Z+5	; 0x05
    13ea:	8f 5f       	subi	r24, 0xFF	; 255
    13ec:	85 83       	std	Z+5, r24	; 0x05
    13ee:	8c 83       	std	Y+4, r24	; 0x04
    13f0:	8f 81       	ldd	r24, Y+7	; 0x07
    13f2:	98 85       	ldd	r25, Y+8	; 0x08
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	69 f4       	brne	.+26     	; 0x1412 <nwkTxFrame+0x86>
    13f8:	81 e4       	ldi	r24, 0x41	; 65
    13fa:	98 e8       	ldi	r25, 0x88	; 136
    13fc:	9b 83       	std	Y+3, r25	; 0x03
    13fe:	8a 83       	std	Y+2, r24	; 0x02
    1400:	2b d4       	rcall	.+2134   	; 0x1c58 <rand>
    1402:	cc 57       	subi	r28, 0x7C	; 124
    1404:	df 4f       	sbci	r29, 0xFF	; 255
    1406:	87 70       	andi	r24, 0x07	; 7
    1408:	99 27       	eor	r25, r25
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	99 83       	std	Y+1, r25	; 0x01
    140e:	88 83       	st	Y, r24
    1410:	08 c0       	rjmp	.+16     	; 0x1422 <nwkTxFrame+0x96>
    1412:	81 e6       	ldi	r24, 0x61	; 97
    1414:	98 e8       	ldi	r25, 0x88	; 136
    1416:	9b 83       	std	Y+3, r25	; 0x03
    1418:	8a 83       	std	Y+2, r24	; 0x02
    141a:	cc 57       	subi	r28, 0x7C	; 124
    141c:	df 4f       	sbci	r29, 0xFF	; 255
    141e:	19 82       	std	Y+1, r1	; 0x01
    1420:	18 82       	st	Y, r1
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	08 95       	ret

00001428 <nwkTxBroadcastFrame>:
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	8c 01       	movw	r16, r24
    1432:	61 da       	rcall	.-2878   	; 0x8f6 <nwkFrameAlloc>
    1434:	ec 01       	movw	r28, r24
    1436:	89 2b       	or	r24, r25
    1438:	a9 f1       	breq	.+106    	; 0x14a4 <nwkTxBroadcastFrame+0x7c>
    143a:	82 e1       	ldi	r24, 0x12	; 18
    143c:	88 83       	st	Y, r24
    143e:	f8 01       	movw	r30, r16
    1440:	81 81       	ldd	r24, Z+1	; 0x01
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	fe 01       	movw	r30, r28
    1446:	ed 57       	subi	r30, 0x7D	; 125
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	10 82       	st	Z, r1
    144c:	05 d4       	rcall	.+2058   	; 0x1c58 <rand>
    144e:	fe 01       	movw	r30, r28
    1450:	ec 57       	subi	r30, 0x7C	; 124
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	87 70       	andi	r24, 0x07	; 7
    1456:	99 27       	eor	r25, r25
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
    145e:	33 96       	adiw	r30, 0x03	; 3
    1460:	11 82       	std	Z+1, r1	; 0x01
    1462:	10 82       	st	Z, r1
    1464:	f8 01       	movw	r30, r16
    1466:	41 81       	ldd	r20, Z+1	; 0x01
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	b8 01       	movw	r22, r16
    146c:	6e 5f       	subi	r22, 0xFE	; 254
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	ce 01       	movw	r24, r28
    1472:	02 96       	adiw	r24, 0x02	; 2
    1474:	ff d3       	rcall	.+2046   	; 0x1c74 <memcpy>
    1476:	81 e4       	ldi	r24, 0x41	; 65
    1478:	98 e8       	ldi	r25, 0x88	; 136
    147a:	9b 83       	std	Y+3, r25	; 0x03
    147c:	8a 83       	std	Y+2, r24	; 0x02
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	98 87       	std	Y+8, r25	; 0x08
    1484:	8f 83       	std	Y+7, r24	; 0x07
    1486:	f8 01       	movw	r30, r16
    1488:	85 81       	ldd	r24, Z+5	; 0x05
    148a:	96 81       	ldd	r25, Z+6	; 0x06
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	e2 e9       	ldi	r30, 0x92	; 146
    1492:	f8 e1       	ldi	r31, 0x18	; 24
    1494:	80 81       	ld	r24, Z
    1496:	91 81       	ldd	r25, Z+1	; 0x01
    1498:	9a 87       	std	Y+10, r25	; 0x0a
    149a:	89 87       	std	Y+9, r24	; 0x09
    149c:	85 81       	ldd	r24, Z+5	; 0x05
    149e:	8f 5f       	subi	r24, 0xFF	; 255
    14a0:	85 83       	std	Z+5, r24	; 0x05
    14a2:	8c 83       	std	Y+4, r24	; 0x04
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	08 95       	ret

000014ae <nwkTxAckReceived>:
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	fc 01       	movw	r30, r24
    14b4:	21 85       	ldd	r18, Z+9	; 0x09
    14b6:	23 30       	cpi	r18, 0x03	; 3
    14b8:	d9 f4       	brne	.+54     	; 0x14f0 <nwkTxAckReceived+0x42>
    14ba:	10 c0       	rjmp	.+32     	; 0x14dc <nwkTxAckReceived+0x2e>
    14bc:	fc 01       	movw	r30, r24
    14be:	20 81       	ld	r18, Z
    14c0:	26 31       	cpi	r18, 0x16	; 22
    14c2:	89 f4       	brne	.+34     	; 0x14e6 <nwkTxAckReceived+0x38>
    14c4:	34 85       	ldd	r19, Z+12	; 0x0c
    14c6:	29 81       	ldd	r18, Y+1	; 0x01
    14c8:	32 13       	cpse	r19, r18
    14ca:	0d c0       	rjmp	.+26     	; 0x14e6 <nwkTxAckReceived+0x38>
    14cc:	27 e1       	ldi	r18, 0x17	; 23
    14ce:	20 83       	st	Z, r18
    14d0:	2a 81       	ldd	r18, Y+2	; 0x02
    14d2:	ea 57       	subi	r30, 0x7A	; 122
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	20 83       	st	Z, r18
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <nwkTxAckReceived+0x44>
    14dc:	fc 01       	movw	r30, r24
    14de:	c7 81       	ldd	r28, Z+7	; 0x07
    14e0:	d0 85       	ldd	r29, Z+8	; 0x08
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	4a da       	rcall	.-2924   	; 0x97c <nwkFrameNext>
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	41 f7       	brne	.-48     	; 0x14bc <nwkTxAckReceived+0xe>
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <nwkTxAckReceived+0x44>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    14f8:	e0 91 fd 17 	lds	r30, 0x17FD	; 0x8017fd <nwkTxPhyActiveFrame>
    14fc:	f0 91 fe 17 	lds	r31, 0x17FE	; 0x8017fe <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	21 f0       	breq	.+8      	; 0x150c <PHY_DataConf+0x14>
    1504:	48 f0       	brcs	.+18     	; 0x1518 <PHY_DataConf+0x20>
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	19 f0       	breq	.+6      	; 0x1510 <PHY_DataConf+0x18>
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    150c:	80 e2       	ldi	r24, 0x20	; 32
    150e:	05 c0       	rjmp	.+10     	; 0x151a <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    1510:	81 e2       	ldi	r24, 0x21	; 33
    1512:	03 c0       	rjmp	.+6      	; 0x151a <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	01 c0       	rjmp	.+2      	; 0x151a <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1518:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    151a:	df 01       	movw	r26, r30
    151c:	ad 57       	subi	r26, 0x7D	; 125
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1522:	85 e1       	ldi	r24, 0x15	; 21
    1524:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1526:	10 92 fe 17 	sts	0x17FE, r1	; 0x8017fe <nwkTxPhyActiveFrame+0x1>
    152a:	10 92 fd 17 	sts	0x17FD, r1	; 0x8017fd <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    152e:	e2 e9       	ldi	r30, 0x92	; 146
    1530:	f8 e1       	ldi	r31, 0x18	; 24
    1532:	86 a1       	ldd	r24, Z+38	; 0x26
    1534:	97 a1       	ldd	r25, Z+39	; 0x27
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	97 a3       	std	Z+39, r25	; 0x27
    153a:	86 a3       	std	Z+38, r24	; 0x26
    153c:	08 95       	ret

0000153e <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    153e:	9f 92       	push	r9
    1540:	af 92       	push	r10
    1542:	bf 92       	push	r11
    1544:	cf 92       	push	r12
    1546:	df 92       	push	r13
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1554:	c0 e0       	ldi	r28, 0x00	; 0
    1556:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1558:	0f 2e       	mov	r0, r31
    155a:	f4 e1       	ldi	r31, 0x14	; 20
    155c:	af 2e       	mov	r10, r31
    155e:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    1560:	02 e9       	ldi	r16, 0x92	; 146
    1562:	18 e1       	ldi	r17, 0x18	; 24
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1564:	0f 2e       	mov	r0, r31
    1566:	f7 e1       	ldi	r31, 0x17	; 23
    1568:	df 2e       	mov	r13, r31
    156a:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    156c:	0f 2e       	mov	r0, r31
    156e:	f6 e1       	ldi	r31, 0x16	; 22
    1570:	9f 2e       	mov	r9, r31
    1572:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1574:	0f 2e       	mov	r0, r31
    1576:	f9 e2       	ldi	r31, 0x29	; 41
    1578:	ef 2e       	mov	r14, r31
    157a:	f1 2c       	mov	r15, r1
    157c:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    157e:	0f 2e       	mov	r0, r31
    1580:	f3 e1       	ldi	r31, 0x13	; 19
    1582:	cf 2e       	mov	r12, r31
    1584:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1586:	0f 2e       	mov	r0, r31
    1588:	f1 e1       	ldi	r31, 0x11	; 17
    158a:	bf 2e       	mov	r11, r31
    158c:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    158e:	60 c0       	rjmp	.+192    	; 0x1650 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    1590:	88 81       	ld	r24, Y
    1592:	83 31       	cpi	r24, 0x13	; 19
    1594:	c1 f0       	breq	.+48     	; 0x15c6 <nwkTxTaskHandler+0x88>
    1596:	18 f4       	brcc	.+6      	; 0x159e <nwkTxTaskHandler+0x60>
    1598:	82 31       	cpi	r24, 0x12	; 18
    159a:	39 f0       	breq	.+14     	; 0x15aa <nwkTxTaskHandler+0x6c>
    159c:	59 c0       	rjmp	.+178    	; 0x1650 <nwkTxTaskHandler+0x112>
    159e:	85 31       	cpi	r24, 0x15	; 21
    15a0:	49 f1       	breq	.+82     	; 0x15f4 <nwkTxTaskHandler+0xb6>
    15a2:	87 31       	cpi	r24, 0x17	; 23
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <nwkTxTaskHandler+0x6a>
    15a6:	45 c0       	rjmp	.+138    	; 0x1632 <nwkTxTaskHandler+0xf4>
    15a8:	53 c0       	rjmp	.+166    	; 0x1650 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    15aa:	fe 01       	movw	r30, r28
    15ac:	ec 57       	subi	r30, 0x7C	; 124
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	80 81       	ld	r24, Z
    15b2:	91 81       	ldd	r25, Z+1	; 0x01
    15b4:	89 2b       	or	r24, r25
    15b6:	29 f0       	breq	.+10     	; 0x15c2 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    15b8:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    15ba:	83 ee       	ldi	r24, 0xE3	; 227
    15bc:	97 e1       	ldi	r25, 0x17	; 23
    15be:	11 d2       	rcall	.+1058   	; 0x19e2 <SYS_TimerStart>
    15c0:	47 c0       	rjmp	.+142    	; 0x1650 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    15c2:	c8 82       	st	Y, r12
    15c4:	45 c0       	rjmp	.+138    	; 0x1650 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    15c6:	80 91 fd 17 	lds	r24, 0x17FD	; 0x8017fd <nwkTxPhyActiveFrame>
    15ca:	90 91 fe 17 	lds	r25, 0x17FE	; 0x8017fe <nwkTxPhyActiveFrame+0x1>
    15ce:	89 2b       	or	r24, r25
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <nwkTxTaskHandler+0x96>
    15d2:	3e c0       	rjmp	.+124    	; 0x1650 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    15d4:	d0 93 fe 17 	sts	0x17FE, r29	; 0x8017fe <nwkTxPhyActiveFrame+0x1>
    15d8:	c0 93 fd 17 	sts	0x17FD, r28	; 0x8017fd <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    15dc:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    15de:	69 81       	ldd	r22, Y+1	; 0x01
    15e0:	ce 01       	movw	r24, r28
    15e2:	02 96       	adiw	r24, 0x02	; 2
    15e4:	cb d0       	rcall	.+406    	; 0x177c <PHY_DataReq>
          nwkIb.lock++;
    15e6:	f8 01       	movw	r30, r16
    15e8:	86 a1       	ldd	r24, Z+38	; 0x26
    15ea:	97 a1       	ldd	r25, Z+39	; 0x27
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	97 a3       	std	Z+39, r25	; 0x27
    15f0:	86 a3       	std	Z+38, r24	; 0x26
    15f2:	2e c0       	rjmp	.+92     	; 0x1650 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    15f4:	fe 01       	movw	r30, r28
    15f6:	ed 57       	subi	r30, 0x7D	; 125
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	81 11       	cpse	r24, r1
    15fe:	17 c0       	rjmp	.+46     	; 0x162e <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    1600:	2d 85       	ldd	r18, Y+13	; 0x0d
    1602:	3e 85       	ldd	r19, Y+14	; 0x0e
    1604:	f8 01       	movw	r30, r16
    1606:	80 81       	ld	r24, Z
    1608:	91 81       	ldd	r25, Z+1	; 0x01
    160a:	28 17       	cp	r18, r24
    160c:	39 07       	cpc	r19, r25
    160e:	69 f4       	brne	.+26     	; 0x162a <nwkTxTaskHandler+0xec>
    1610:	8b 85       	ldd	r24, Y+11	; 0x0b
    1612:	80 ff       	sbrs	r24, 0
    1614:	0a c0       	rjmp	.+20     	; 0x162a <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1616:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1618:	fe 01       	movw	r30, r28
    161a:	ec 57       	subi	r30, 0x7C	; 124
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	f1 82       	std	Z+1, r15	; 0x01
    1620:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1622:	80 ef       	ldi	r24, 0xF0	; 240
    1624:	97 e1       	ldi	r25, 0x17	; 23
    1626:	dd d1       	rcall	.+954    	; 0x19e2 <SYS_TimerStart>
    1628:	13 c0       	rjmp	.+38     	; 0x1650 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    162a:	d8 82       	st	Y, r13
    162c:	11 c0       	rjmp	.+34     	; 0x1650 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    162e:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    1630:	0f c0       	rjmp	.+30     	; 0x1650 <nwkTxTaskHandler+0x112>
    1632:	ce 01       	movw	r24, r28
    1634:	b8 da       	rcall	.-2704   	; 0xba6 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1636:	fe 01       	movw	r30, r28
    1638:	e9 57       	subi	r30, 0x79	; 121
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	01 90       	ld	r0, Z+
    163e:	f0 81       	ld	r31, Z
    1640:	e0 2d       	mov	r30, r0
    1642:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    1644:	19 f4       	brne	.+6      	; 0x164c <nwkTxTaskHandler+0x10e>
    1646:	ce 01       	movw	r24, r28
    1648:	8f d9       	rcall	.-3298   	; 0x968 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <nwkTxTaskHandler+0x112>
    164c:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    164e:	19 95       	eicall
    1650:	ce 01       	movw	r24, r28
    1652:	94 d9       	rcall	.-3288   	; 0x97c <nwkFrameNext>
    1654:	ec 01       	movw	r28, r24
    1656:	89 2b       	or	r24, r25
    1658:	09 f0       	breq	.+2      	; 0x165c <nwkTxTaskHandler+0x11e>
    165a:	9a cf       	rjmp	.-204    	; 0x1590 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14
    1668:	df 90       	pop	r13
    166a:	cf 90       	pop	r12
    166c:	bf 90       	pop	r11
    166e:	af 90       	pop	r10
    1670:	9f 90       	pop	r9
    1672:	08 95       	ret

00001674 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    1674:	80 91 ff 17 	lds	r24, 0x17FF	; 0x8017ff <phyBand>
    1678:	98 2f       	mov	r25, r24
    167a:	9f 70       	andi	r25, 0x0F	; 15
    167c:	e4 e5       	ldi	r30, 0x54	; 84
    167e:	f1 e0       	ldi	r31, 0x01	; 1
    1680:	80 81       	ld	r24, Z
    1682:	80 7f       	andi	r24, 0xF0	; 240
    1684:	89 2b       	or	r24, r25
    1686:	80 83       	st	Z, r24
    1688:	80 91 ff 17 	lds	r24, 0x17FF	; 0x8017ff <phyBand>
    168c:	88 23       	and	r24, r24
    168e:	29 f0       	breq	.+10     	; 0x169a <phySetChannel+0x26>
    1690:	80 91 00 18 	lds	r24, 0x1800	; 0x801800 <phyChannel>
    1694:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    1698:	08 95       	ret
    169a:	80 91 00 18 	lds	r24, 0x1800	; 0x801800 <phyChannel>
    169e:	98 2f       	mov	r25, r24
    16a0:	9f 71       	andi	r25, 0x1F	; 31
    16a2:	e8 e4       	ldi	r30, 0x48	; 72
    16a4:	f1 e0       	ldi	r31, 0x01	; 1
    16a6:	80 81       	ld	r24, Z
    16a8:	80 7e       	andi	r24, 0xE0	; 224
    16aa:	89 2b       	or	r24, r25
    16ac:	80 83       	st	Z, r24
    16ae:	08 95       	ret

000016b0 <phyTrxSetState>:
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    16b6:	e1 e4       	ldi	r30, 0x41	; 65
    16b8:	f1 e0       	ldi	r31, 0x01	; 1
    16ba:	90 81       	ld	r25, Z
    16bc:	9f 71       	andi	r25, 0x1F	; 31
    16be:	98 30       	cpi	r25, 0x08	; 8
    16c0:	e1 f7       	brne	.-8      	; 0x16ba <phyTrxSetState+0xa>
    16c2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    16c6:	e1 e4       	ldi	r30, 0x41	; 65
    16c8:	f1 e0       	ldi	r31, 0x01	; 1
    16ca:	90 81       	ld	r25, Z
    16cc:	9f 71       	andi	r25, 0x1F	; 31
    16ce:	89 13       	cpse	r24, r25
    16d0:	fc cf       	rjmp	.-8      	; 0x16ca <phyTrxSetState+0x1a>
    16d2:	08 95       	ret

000016d4 <phySetRxState>:
    16d4:	88 e0       	ldi	r24, 0x08	; 8
    16d6:	ec df       	rcall	.-40     	; 0x16b0 <phyTrxSetState>
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    16de:	80 91 01 18 	lds	r24, 0x1801	; 0x801801 <phyRxState>
    16e2:	88 23       	and	r24, r24
    16e4:	11 f0       	breq	.+4      	; 0x16ea <phySetRxState+0x16>
    16e6:	86 e1       	ldi	r24, 0x16	; 22
    16e8:	e3 cf       	rjmp	.-58     	; 0x16b0 <phyTrxSetState>
    16ea:	08 95       	ret

000016ec <PHY_Init>:
    16ec:	e9 e3       	ldi	r30, 0x39	; 57
    16ee:	f1 e0       	ldi	r31, 0x01	; 1
    16f0:	80 81       	ld	r24, Z
    16f2:	81 60       	ori	r24, 0x01	; 1
    16f4:	80 83       	st	Z, r24
    16f6:	10 92 01 18 	sts	0x1801, r1	; 0x801801 <phyRxState>
    16fa:	10 92 ff 17 	sts	0x17FF, r1	; 0x8017ff <phyBand>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <phyState>
    1704:	88 e0       	ldi	r24, 0x08	; 8
    1706:	d4 df       	rcall	.-88     	; 0x16b0 <phyTrxSetState>
    1708:	8b ee       	ldi	r24, 0xEB	; 235
    170a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    170e:	ec e4       	ldi	r30, 0x4C	; 76
    1710:	f1 e0       	ldi	r31, 0x01	; 1
    1712:	80 81       	ld	r24, Z
    1714:	80 68       	ori	r24, 0x80	; 128
    1716:	80 83       	st	Z, r24
    1718:	08 95       	ret

0000171a <PHY_SetRxState>:
    171a:	80 93 01 18 	sts	0x1801, r24	; 0x801801 <phyRxState>
    171e:	da cf       	rjmp	.-76     	; 0x16d4 <phySetRxState>
    1720:	08 95       	ret

00001722 <PHY_SetChannel>:
    1722:	80 93 00 18 	sts	0x1800, r24	; 0x801800 <phyChannel>
    1726:	a6 cf       	rjmp	.-180    	; 0x1674 <phySetChannel>
    1728:	08 95       	ret

0000172a <PHY_SetPanId>:
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	1f 92       	push	r1
    1730:	1f 92       	push	r1
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	08 95       	ret

0000174e <PHY_SetShortAddr>:
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	1f 92       	push	r1
    1754:	1f 92       	push	r1
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
    1768:	99 81       	ldd	r25, Y+1	; 0x01
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	89 0f       	add	r24, r25
    176e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	08 95       	ret

0000177c <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	18 2f       	mov	r17, r24
    1784:	d9 2f       	mov	r29, r25
    1786:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1788:	89 e1       	ldi	r24, 0x19	; 25
    178a:	92 df       	rcall	.-220    	; 0x16b0 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	8c 0f       	add	r24, r28
    1796:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
  for (uint8_t i = 0; i < size; i++)
    179a:	cc 23       	and	r28, r28
    179c:	71 f0       	breq	.+28     	; 0x17ba <PHY_DataReq+0x3e>
    179e:	a1 2f       	mov	r26, r17
    17a0:	bd 2f       	mov	r27, r29
    17a2:	c1 50       	subi	r28, 0x01	; 1
    17a4:	6c 2f       	mov	r22, r28
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	6e 57       	subi	r22, 0x7E	; 126
    17aa:	7e 4f       	sbci	r23, 0xFE	; 254
    17ac:	e1 e8       	ldi	r30, 0x81	; 129
    17ae:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    17b0:	8d 91       	ld	r24, X+
    17b2:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    17b4:	e6 17       	cp	r30, r22
    17b6:	f7 07       	cpc	r31, r23
    17b8:	d9 f7       	brne	.-10     	; 0x17b0 <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    17ba:	83 e0       	ldi	r24, 0x03	; 3
    17bc:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	08 95       	ret

000017ce <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <PHY_TaskHandler+0x8>
    17d6:	1f 92       	push	r1
    17d8:	1f 92       	push	r1
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    17de:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <phyState>
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <PHY_TaskHandler+0x1a>
    17e6:	65 c0       	rjmp	.+202    	; 0x18b2 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    17e8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    17ec:	83 ff       	sbrs	r24, 3
    17ee:	3e c0       	rjmp	.+124    	; 0x186c <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    17f0:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    17f4:	6a 2f       	mov	r22, r26
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	ab 01       	movw	r20, r22
    17fa:	4f 5f       	subi	r20, 0xFF	; 255
    17fc:	5f 4f       	sbci	r21, 0xFF	; 255
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1804:	fc 01       	movw	r30, r24
    1806:	e0 58       	subi	r30, 0x80	; 128
    1808:	fe 4f       	sbci	r31, 0xFE	; 254
    180a:	30 81       	ld	r19, Z
    180c:	fc 01       	movw	r30, r24
    180e:	ee 5f       	subi	r30, 0xFE	; 254
    1810:	f7 4e       	sbci	r31, 0xE7	; 231
    1812:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1814:	2f 5f       	subi	r18, 0xFF	; 255
    1816:	82 2f       	mov	r24, r18
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	84 17       	cp	r24, r20
    181c:	95 07       	cpc	r25, r21
    181e:	94 f3       	brlt	.-28     	; 0x1804 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	98 e1       	ldi	r25, 0x18	; 24
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1828:	a2 50       	subi	r26, 0x02	; 2
    182a:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    182c:	fb 01       	movw	r30, r22
    182e:	ee 5f       	subi	r30, 0xFE	; 254
    1830:	f7 4e       	sbci	r31, 0xE7	; 231
    1832:	80 81       	ld	r24, Z
    1834:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1836:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    183a:	8a 55       	subi	r24, 0x5A	; 90
    183c:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    183e:	ce 01       	movw	r24, r28
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	bd da       	rcall	.-2694   	; 0xdbe <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1844:	e1 e4       	ldi	r30, 0x41	; 65
    1846:	f1 e0       	ldi	r31, 0x01	; 1
    1848:	80 81       	ld	r24, Z
    184a:	8f 71       	andi	r24, 0x1F	; 31
    184c:	86 31       	cpi	r24, 0x16	; 22
    184e:	e1 f7       	brne	.-8      	; 0x1848 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    1850:	ef e4       	ldi	r30, 0x4F	; 79
    1852:	f1 e0       	ldi	r31, 0x01	; 1
    1854:	80 81       	ld	r24, Z
    1856:	88 60       	ori	r24, 0x08	; 8
    1858:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    185a:	ec e4       	ldi	r30, 0x4C	; 76
    185c:	f1 e0       	ldi	r31, 0x01	; 1
    185e:	80 81       	ld	r24, Z
    1860:	8f 77       	andi	r24, 0x7F	; 127
    1862:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1864:	80 81       	ld	r24, Z
    1866:	80 68       	ori	r24, 0x80	; 128
    1868:	80 83       	st	Z, r24
    186a:	23 c0       	rjmp	.+70     	; 0x18b2 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    186c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1870:	86 ff       	sbrs	r24, 6
    1872:	1f c0       	rjmp	.+62     	; 0x18b2 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1874:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1878:	8f 71       	andi	r24, 0x1F	; 31
    187a:	89 31       	cpi	r24, 0x19	; 25
    187c:	a9 f4       	brne	.+42     	; 0x18a8 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    187e:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1882:	12 95       	swap	r17
    1884:	16 95       	lsr	r17
    1886:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1888:	49 f0       	breq	.+18     	; 0x189c <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    188a:	13 30       	cpi	r17, 0x03	; 3
    188c:	21 f0       	breq	.+8      	; 0x1896 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    188e:	15 30       	cpi	r17, 0x05	; 5
    1890:	21 f0       	breq	.+8      	; 0x189a <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1892:	13 e0       	ldi	r17, 0x03	; 3
    1894:	03 c0       	rjmp	.+6      	; 0x189c <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1896:	11 e0       	ldi	r17, 0x01	; 1
    1898:	01 c0       	rjmp	.+2      	; 0x189c <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    189a:	12 e0       	ldi	r17, 0x02	; 2
    189c:	1b df       	rcall	.-458    	; 0x16d4 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <phyState>

      PHY_DataConf(status);
    18a4:	81 2f       	mov	r24, r17
    18a6:	28 de       	rcall	.-944    	; 0x14f8 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    18a8:	ef e4       	ldi	r30, 0x4F	; 79
    18aa:	f1 e0       	ldi	r31, 0x01	; 1
    18ac:	80 81       	ld	r24, Z
    18ae:	80 64       	ori	r24, 0x40	; 64
    18b0:	80 83       	st	Z, r24
  }
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	08 95       	ret

000018c4 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    18c4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <HAL_Init>
  SYS_TimerInit();
    18c8:	6d d0       	rcall	.+218    	; 0x19a4 <SYS_TimerInit>
  PHY_Init();
    18ca:	10 df       	rcall	.-480    	; 0x16ec <PHY_Init>
    18cc:	0c 94 4f 03 	jmp	0x69e	; 0x69e <NWK_Init>
  NWK_Init();
    18d0:	08 95       	ret

000018d2 <SYS_TaskHandler>:
    18d2:	7d df       	rcall	.-262    	; 0x17ce <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    18d4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    18d8:	8f c0       	rjmp	.+286    	; 0x19f8 <SYS_TimerTaskHandler>
    18da:	08 95       	ret

000018dc <placeTimer>:

      break;
    }
    prev = t;
  }
}
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	ec 01       	movw	r28, r24
    18e6:	80 91 83 18 	lds	r24, 0x1883	; 0x801883 <timers>
    18ea:	90 91 84 18 	lds	r25, 0x1884	; 0x801884 <timers+0x1>
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <placeTimer+0x18>
    18f2:	45 c0       	rjmp	.+138    	; 0x197e <placeTimer+0xa2>
    18f4:	4e 81       	ldd	r20, Y+6	; 0x06
    18f6:	5f 81       	ldd	r21, Y+7	; 0x07
    18f8:	68 85       	ldd	r22, Y+8	; 0x08
    18fa:	79 85       	ldd	r23, Y+9	; 0x09
    18fc:	fc 01       	movw	r30, r24
    18fe:	02 81       	ldd	r16, Z+2	; 0x02
    1900:	13 81       	ldd	r17, Z+3	; 0x03
    1902:	24 81       	ldd	r18, Z+4	; 0x04
    1904:	35 81       	ldd	r19, Z+5	; 0x05
    1906:	40 17       	cp	r20, r16
    1908:	51 07       	cpc	r21, r17
    190a:	62 07       	cpc	r22, r18
    190c:	73 07       	cpc	r23, r19
    190e:	60 f0       	brcs	.+24     	; 0x1928 <placeTimer+0x4c>
    1910:	dc 01       	movw	r26, r24
    1912:	17 c0       	rjmp	.+46     	; 0x1942 <placeTimer+0x66>
    1914:	02 81       	ldd	r16, Z+2	; 0x02
    1916:	13 81       	ldd	r17, Z+3	; 0x03
    1918:	24 81       	ldd	r18, Z+4	; 0x04
    191a:	35 81       	ldd	r19, Z+5	; 0x05
    191c:	40 17       	cp	r20, r16
    191e:	51 07       	cpc	r21, r17
    1920:	62 07       	cpc	r22, r18
    1922:	73 07       	cpc	r23, r19
    1924:	68 f4       	brcc	.+26     	; 0x1940 <placeTimer+0x64>
    1926:	03 c0       	rjmp	.+6      	; 0x192e <placeTimer+0x52>
    1928:	fc 01       	movw	r30, r24
    192a:	a0 e0       	ldi	r26, 0x00	; 0
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	04 1b       	sub	r16, r20
    1930:	15 0b       	sbc	r17, r21
    1932:	26 0b       	sbc	r18, r22
    1934:	37 0b       	sbc	r19, r23
    1936:	02 83       	std	Z+2, r16	; 0x02
    1938:	13 83       	std	Z+3, r17	; 0x03
    193a:	24 83       	std	Z+4, r18	; 0x04
    193c:	35 83       	std	Z+5, r19	; 0x05
    193e:	0a c0       	rjmp	.+20     	; 0x1954 <placeTimer+0x78>
    1940:	df 01       	movw	r26, r30
    1942:	40 1b       	sub	r20, r16
    1944:	51 0b       	sbc	r21, r17
    1946:	62 0b       	sbc	r22, r18
    1948:	73 0b       	sbc	r23, r19
    194a:	ed 91       	ld	r30, X+
    194c:	fc 91       	ld	r31, X
    194e:	11 97       	sbiw	r26, 0x01	; 1
    1950:	30 97       	sbiw	r30, 0x00	; 0
    1952:	01 f7       	brne	.-64     	; 0x1914 <placeTimer+0x38>
    1954:	4a 83       	std	Y+2, r20	; 0x02
    1956:	5b 83       	std	Y+3, r21	; 0x03
    1958:	6c 83       	std	Y+4, r22	; 0x04
    195a:	7d 83       	std	Y+5, r23	; 0x05
    195c:	10 97       	sbiw	r26, 0x00	; 0
    195e:	41 f0       	breq	.+16     	; 0x1970 <placeTimer+0x94>
    1960:	8d 91       	ld	r24, X+
    1962:	9c 91       	ld	r25, X
    1964:	11 97       	sbiw	r26, 0x01	; 1
    1966:	99 83       	std	Y+1, r25	; 0x01
    1968:	88 83       	st	Y, r24
    196a:	cd 93       	st	X+, r28
    196c:	dc 93       	st	X, r29
    196e:	15 c0       	rjmp	.+42     	; 0x199a <placeTimer+0xbe>
    1970:	99 83       	std	Y+1, r25	; 0x01
    1972:	88 83       	st	Y, r24
    1974:	d0 93 84 18 	sts	0x1884, r29	; 0x801884 <timers+0x1>
    1978:	c0 93 83 18 	sts	0x1883, r28	; 0x801883 <timers>
    197c:	0e c0       	rjmp	.+28     	; 0x199a <placeTimer+0xbe>
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	18 82       	st	Y, r1
    1982:	8e 81       	ldd	r24, Y+6	; 0x06
    1984:	9f 81       	ldd	r25, Y+7	; 0x07
    1986:	a8 85       	ldd	r26, Y+8	; 0x08
    1988:	b9 85       	ldd	r27, Y+9	; 0x09
    198a:	8a 83       	std	Y+2, r24	; 0x02
    198c:	9b 83       	std	Y+3, r25	; 0x03
    198e:	ac 83       	std	Y+4, r26	; 0x04
    1990:	bd 83       	std	Y+5, r27	; 0x05
    1992:	d0 93 84 18 	sts	0x1884, r29	; 0x801884 <timers+0x1>
    1996:	c0 93 83 18 	sts	0x1883, r28	; 0x801883 <timers>
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	08 95       	ret

000019a4 <SYS_TimerInit>:
    19a4:	10 92 84 18 	sts	0x1884, r1	; 0x801884 <timers+0x1>
    19a8:	10 92 83 18 	sts	0x1883, r1	; 0x801883 <timers>
    19ac:	08 95       	ret

000019ae <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    19ae:	e0 91 83 18 	lds	r30, 0x1883	; 0x801883 <timers>
    19b2:	f0 91 84 18 	lds	r31, 0x1884	; 0x801884 <timers+0x1>
    19b6:	30 97       	sbiw	r30, 0x00	; 0
    19b8:	71 f0       	breq	.+28     	; 0x19d6 <SYS_TimerStarted+0x28>
    if (t == timer)
    19ba:	e8 17       	cp	r30, r24
    19bc:	f9 07       	cpc	r31, r25
    19be:	21 f4       	brne	.+8      	; 0x19c8 <SYS_TimerStarted+0x1a>
    19c0:	0c c0       	rjmp	.+24     	; 0x19da <SYS_TimerStarted+0x2c>
    19c2:	8e 17       	cp	r24, r30
    19c4:	9f 07       	cpc	r25, r31
    19c6:	59 f0       	breq	.+22     	; 0x19de <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    19c8:	01 90       	ld	r0, Z+
    19ca:	f0 81       	ld	r31, Z
    19cc:	e0 2d       	mov	r30, r0
    19ce:	30 97       	sbiw	r30, 0x00	; 0
    19d0:	c1 f7       	brne	.-16     	; 0x19c2 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	08 95       	ret
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	08 95       	ret
    19de:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    19e0:	08 95       	ret

000019e2 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    19e8:	e2 df       	rcall	.-60     	; 0x19ae <SYS_TimerStarted>
    19ea:	81 11       	cpse	r24, r1
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <SYS_TimerStart+0x10>
    placeTimer(timer);
    19ee:	ce 01       	movw	r24, r28
    19f0:	75 df       	rcall	.-278    	; 0x18dc <placeTimer>
}
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    19f8:	cf 92       	push	r12
    19fa:	df 92       	push	r13
    19fc:	ef 92       	push	r14
    19fe:	ff 92       	push	r15
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1a04:	80 91 91 18 	lds	r24, 0x1891	; 0x801891 <halTimerIrqCount>
    1a08:	88 23       	and	r24, r24
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <SYS_TimerTaskHandler+0x16>
    1a0c:	59 c0       	rjmp	.+178    	; 0x1ac0 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    1a0e:	8f b7       	in	r24, 0x3f	; 63
    1a10:	f8 94       	cli
    cnt = halTimerIrqCount;
    1a12:	c0 90 91 18 	lds	r12, 0x1891	; 0x801891 <halTimerIrqCount>
    halTimerIrqCount = 0;
    1a16:	10 92 91 18 	sts	0x1891, r1	; 0x801891 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    1a1a:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1a1c:	d1 2c       	mov	r13, r1
    1a1e:	e1 2c       	mov	r14, r1
    1a20:	f1 2c       	mov	r15, r1
    1a22:	cc 0c       	add	r12, r12
    1a24:	dd 1c       	adc	r13, r13
    1a26:	ee 1c       	adc	r14, r14
    1a28:	ff 1c       	adc	r15, r15
    1a2a:	d7 01       	movw	r26, r14
    1a2c:	c6 01       	movw	r24, r12
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	aa 1f       	adc	r26, r26
    1a34:	bb 1f       	adc	r27, r27
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	aa 1f       	adc	r26, r26
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	c8 0e       	add	r12, r24
    1a40:	d9 1e       	adc	r13, r25
    1a42:	ea 1e       	adc	r14, r26
    1a44:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1a46:	c0 91 83 18 	lds	r28, 0x1883	; 0x801883 <timers>
    1a4a:	d0 91 84 18 	lds	r29, 0x1884	; 0x801884 <timers+0x1>
    1a4e:	20 97       	sbiw	r28, 0x00	; 0
    1a50:	b9 f1       	breq	.+110    	; 0x1ac0 <SYS_TimerTaskHandler+0xc8>
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	9b 81       	ldd	r25, Y+3	; 0x03
    1a56:	ac 81       	ldd	r26, Y+4	; 0x04
    1a58:	bd 81       	ldd	r27, Y+5	; 0x05
    1a5a:	c8 16       	cp	r12, r24
    1a5c:	d9 06       	cpc	r13, r25
    1a5e:	ea 06       	cpc	r14, r26
    1a60:	fb 06       	cpc	r15, r27
    1a62:	10 f1       	brcs	.+68     	; 0x1aa8 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1a64:	c8 1a       	sub	r12, r24
    1a66:	d9 0a       	sbc	r13, r25
    1a68:	ea 0a       	sbc	r14, r26
    1a6a:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1a6c:	88 81       	ld	r24, Y
    1a6e:	99 81       	ldd	r25, Y+1	; 0x01
    1a70:	90 93 84 18 	sts	0x1884, r25	; 0x801884 <timers+0x1>
    1a74:	80 93 83 18 	sts	0x1883, r24	; 0x801883 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1a78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	11 f4       	brne	.+4      	; 0x1a82 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    1a7e:	ce 01       	movw	r24, r28
    1a80:	2d df       	rcall	.-422    	; 0x18dc <placeTimer>
    timer->handler(timer);
    1a82:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a84:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a86:	ce 01       	movw	r24, r28
    1a88:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1a8a:	c0 91 83 18 	lds	r28, 0x1883	; 0x801883 <timers>
    1a8e:	d0 91 84 18 	lds	r29, 0x1884	; 0x801884 <timers+0x1>
    1a92:	20 97       	sbiw	r28, 0x00	; 0
    1a94:	a9 f0       	breq	.+42     	; 0x1ac0 <SYS_TimerTaskHandler+0xc8>
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9a:	ac 81       	ldd	r26, Y+4	; 0x04
    1a9c:	bd 81       	ldd	r27, Y+5	; 0x05
    1a9e:	c8 16       	cp	r12, r24
    1aa0:	d9 06       	cpc	r13, r25
    1aa2:	ea 06       	cpc	r14, r26
    1aa4:	fb 06       	cpc	r15, r27
    1aa6:	f0 f6       	brcc	.-68     	; 0x1a64 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1aac:	ac 81       	ldd	r26, Y+4	; 0x04
    1aae:	bd 81       	ldd	r27, Y+5	; 0x05
    1ab0:	8c 19       	sub	r24, r12
    1ab2:	9d 09       	sbc	r25, r13
    1ab4:	ae 09       	sbc	r26, r14
    1ab6:	bf 09       	sbc	r27, r15
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
    1aba:	9b 83       	std	Y+3, r25	; 0x03
    1abc:	ac 83       	std	Y+4, r26	; 0x04
    1abe:	bd 83       	std	Y+5, r27	; 0x05
}
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	08 95       	ret

00001ace <UART1_init>:
uint8_t UART0_GetChar( void )
{
	while ( !(UCSR0A & (1<<RXC0)) )
	;
	return UDR0;
}
    1ace:	9c 01       	movw	r18, r24
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	60 e2       	ldi	r22, 0x20	; 32
    1ad6:	71 ea       	ldi	r23, 0xA1	; 161
    1ad8:	87 e0       	ldi	r24, 0x07	; 7
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	5a d0       	rcall	.+180    	; 0x1b92 <__divmodsi4>
    1ade:	21 50       	subi	r18, 0x01	; 1
    1ae0:	31 09       	sbc	r19, r1
    1ae2:	86 e0       	ldi	r24, 0x06	; 6
    1ae4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1ae8:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1aec:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1af0:	88 e1       	ldi	r24, 0x18	; 24
    1af2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1af6:	08 95       	ret

00001af8 <UART0_init>:
    1af8:	9c 01       	movw	r18, r24
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	60 e2       	ldi	r22, 0x20	; 32
    1b00:	71 ea       	ldi	r23, 0xA1	; 161
    1b02:	87 e0       	ldi	r24, 0x07	; 7
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	45 d0       	rcall	.+138    	; 0x1b92 <__divmodsi4>
    1b08:	21 50       	subi	r18, 0x01	; 1
    1b0a:	31 09       	sbc	r19, r1
    1b0c:	86 e0       	ldi	r24, 0x06	; 6
    1b0e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1b12:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1b16:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1b1a:	80 e1       	ldi	r24, 0x10	; 16
    1b1c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1b20:	08 95       	ret

00001b22 <UART1_SendChar>:
    1b22:	e8 ec       	ldi	r30, 0xC8	; 200
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	90 81       	ld	r25, Z
    1b28:	95 ff       	sbrs	r25, 5
    1b2a:	fd cf       	rjmp	.-6      	; 0x1b26 <UART1_SendChar+0x4>
    1b2c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1b30:	08 95       	ret

00001b32 <UART1_SendString>:

void UART1_SendString(char *text)
{
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	ec 01       	movw	r28, r24
	while (*text != 0x00)
    1b38:	88 81       	ld	r24, Y
    1b3a:	88 23       	and	r24, r24
    1b3c:	29 f0       	breq	.+10     	; 0x1b48 <UART1_SendString+0x16>
    1b3e:	21 96       	adiw	r28, 0x01	; 1
	{
		UART1_SendChar(*text);
    1b40:	f0 df       	rcall	.-32     	; 0x1b22 <UART1_SendChar>
	return UDR0;
}

void UART1_SendString(char *text)
{
	while (*text != 0x00)
    1b42:	89 91       	ld	r24, Y+
    1b44:	81 11       	cpse	r24, r1
    1b46:	fc cf       	rjmp	.-8      	; 0x1b40 <UART1_SendString+0xe>
	{
		UART1_SendChar(*text);
		text++;
	}
}
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	08 95       	ret

00001b4e <__udivmodsi4>:
    1b4e:	a1 e2       	ldi	r26, 0x21	; 33
    1b50:	1a 2e       	mov	r1, r26
    1b52:	aa 1b       	sub	r26, r26
    1b54:	bb 1b       	sub	r27, r27
    1b56:	fd 01       	movw	r30, r26
    1b58:	0d c0       	rjmp	.+26     	; 0x1b74 <__udivmodsi4_ep>

00001b5a <__udivmodsi4_loop>:
    1b5a:	aa 1f       	adc	r26, r26
    1b5c:	bb 1f       	adc	r27, r27
    1b5e:	ee 1f       	adc	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	a2 17       	cp	r26, r18
    1b64:	b3 07       	cpc	r27, r19
    1b66:	e4 07       	cpc	r30, r20
    1b68:	f5 07       	cpc	r31, r21
    1b6a:	20 f0       	brcs	.+8      	; 0x1b74 <__udivmodsi4_ep>
    1b6c:	a2 1b       	sub	r26, r18
    1b6e:	b3 0b       	sbc	r27, r19
    1b70:	e4 0b       	sbc	r30, r20
    1b72:	f5 0b       	sbc	r31, r21

00001b74 <__udivmodsi4_ep>:
    1b74:	66 1f       	adc	r22, r22
    1b76:	77 1f       	adc	r23, r23
    1b78:	88 1f       	adc	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	1a 94       	dec	r1
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <__udivmodsi4_loop>
    1b80:	60 95       	com	r22
    1b82:	70 95       	com	r23
    1b84:	80 95       	com	r24
    1b86:	90 95       	com	r25
    1b88:	9b 01       	movw	r18, r22
    1b8a:	ac 01       	movw	r20, r24
    1b8c:	bd 01       	movw	r22, r26
    1b8e:	cf 01       	movw	r24, r30
    1b90:	08 95       	ret

00001b92 <__divmodsi4>:
    1b92:	05 2e       	mov	r0, r21
    1b94:	97 fb       	bst	r25, 7
    1b96:	16 f4       	brtc	.+4      	; 0x1b9c <__divmodsi4+0xa>
    1b98:	00 94       	com	r0
    1b9a:	0f d0       	rcall	.+30     	; 0x1bba <__negsi2>
    1b9c:	57 fd       	sbrc	r21, 7
    1b9e:	05 d0       	rcall	.+10     	; 0x1baa <__divmodsi4_neg2>
    1ba0:	d6 df       	rcall	.-84     	; 0x1b4e <__udivmodsi4>
    1ba2:	07 fc       	sbrc	r0, 7
    1ba4:	02 d0       	rcall	.+4      	; 0x1baa <__divmodsi4_neg2>
    1ba6:	46 f4       	brtc	.+16     	; 0x1bb8 <__divmodsi4_exit>
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <__negsi2>

00001baa <__divmodsi4_neg2>:
    1baa:	50 95       	com	r21
    1bac:	40 95       	com	r20
    1bae:	30 95       	com	r19
    1bb0:	21 95       	neg	r18
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	4f 4f       	sbci	r20, 0xFF	; 255
    1bb6:	5f 4f       	sbci	r21, 0xFF	; 255

00001bb8 <__divmodsi4_exit>:
    1bb8:	08 95       	ret

00001bba <__negsi2>:
    1bba:	90 95       	com	r25
    1bbc:	80 95       	com	r24
    1bbe:	70 95       	com	r23
    1bc0:	61 95       	neg	r22
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	08 95       	ret

00001bca <do_rand>:
    1bca:	8f 92       	push	r8
    1bcc:	9f 92       	push	r9
    1bce:	af 92       	push	r10
    1bd0:	bf 92       	push	r11
    1bd2:	cf 92       	push	r12
    1bd4:	df 92       	push	r13
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	ec 01       	movw	r28, r24
    1be0:	68 81       	ld	r22, Y
    1be2:	79 81       	ldd	r23, Y+1	; 0x01
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	9b 81       	ldd	r25, Y+3	; 0x03
    1be8:	61 15       	cp	r22, r1
    1bea:	71 05       	cpc	r23, r1
    1bec:	81 05       	cpc	r24, r1
    1bee:	91 05       	cpc	r25, r1
    1bf0:	21 f4       	brne	.+8      	; 0x1bfa <do_rand+0x30>
    1bf2:	64 e2       	ldi	r22, 0x24	; 36
    1bf4:	79 ed       	ldi	r23, 0xD9	; 217
    1bf6:	8b e5       	ldi	r24, 0x5B	; 91
    1bf8:	97 e0       	ldi	r25, 0x07	; 7
    1bfa:	2d e1       	ldi	r18, 0x1D	; 29
    1bfc:	33 ef       	ldi	r19, 0xF3	; 243
    1bfe:	41 e0       	ldi	r20, 0x01	; 1
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	c7 df       	rcall	.-114    	; 0x1b92 <__divmodsi4>
    1c04:	49 01       	movw	r8, r18
    1c06:	5a 01       	movw	r10, r20
    1c08:	9b 01       	movw	r18, r22
    1c0a:	ac 01       	movw	r20, r24
    1c0c:	a7 ea       	ldi	r26, 0xA7	; 167
    1c0e:	b1 e4       	ldi	r27, 0x41	; 65
    1c10:	41 d0       	rcall	.+130    	; 0x1c94 <__muluhisi3>
    1c12:	6b 01       	movw	r12, r22
    1c14:	7c 01       	movw	r14, r24
    1c16:	ac ee       	ldi	r26, 0xEC	; 236
    1c18:	b4 ef       	ldi	r27, 0xF4	; 244
    1c1a:	a5 01       	movw	r20, r10
    1c1c:	94 01       	movw	r18, r8
    1c1e:	46 d0       	rcall	.+140    	; 0x1cac <__mulohisi3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	8c 0d       	add	r24, r12
    1c26:	9d 1d       	adc	r25, r13
    1c28:	ae 1d       	adc	r26, r14
    1c2a:	bf 1d       	adc	r27, r15
    1c2c:	b7 ff       	sbrs	r27, 7
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <do_rand+0x6c>
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	a1 09       	sbc	r26, r1
    1c34:	b0 48       	sbci	r27, 0x80	; 128
    1c36:	88 83       	st	Y, r24
    1c38:	99 83       	std	Y+1, r25	; 0x01
    1c3a:	aa 83       	std	Y+2, r26	; 0x02
    1c3c:	bb 83       	std	Y+3, r27	; 0x03
    1c3e:	9f 77       	andi	r25, 0x7F	; 127
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	cf 90       	pop	r12
    1c4c:	bf 90       	pop	r11
    1c4e:	af 90       	pop	r10
    1c50:	9f 90       	pop	r9
    1c52:	8f 90       	pop	r8
    1c54:	08 95       	ret

00001c56 <rand_r>:
    1c56:	b9 cf       	rjmp	.-142    	; 0x1bca <do_rand>

00001c58 <rand>:
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	92 e0       	ldi	r25, 0x02	; 2
    1c5c:	b6 cf       	rjmp	.-148    	; 0x1bca <do_rand>

00001c5e <srand>:
    1c5e:	a0 e0       	ldi	r26, 0x00	; 0
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1c66:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1c6a:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1c6e:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1c72:	08 95       	ret

00001c74 <memcpy>:
    1c74:	fb 01       	movw	r30, r22
    1c76:	dc 01       	movw	r26, r24
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <memcpy+0xa>
    1c7a:	01 90       	ld	r0, Z+
    1c7c:	0d 92       	st	X+, r0
    1c7e:	41 50       	subi	r20, 0x01	; 1
    1c80:	50 40       	sbci	r21, 0x00	; 0
    1c82:	d8 f7       	brcc	.-10     	; 0x1c7a <memcpy+0x6>
    1c84:	08 95       	ret

00001c86 <strcpy>:
    1c86:	fb 01       	movw	r30, r22
    1c88:	dc 01       	movw	r26, r24
    1c8a:	01 90       	ld	r0, Z+
    1c8c:	0d 92       	st	X+, r0
    1c8e:	00 20       	and	r0, r0
    1c90:	e1 f7       	brne	.-8      	; 0x1c8a <strcpy+0x4>
    1c92:	08 95       	ret

00001c94 <__muluhisi3>:
    1c94:	0f d0       	rcall	.+30     	; 0x1cb4 <__umulhisi3>
    1c96:	a5 9f       	mul	r26, r21
    1c98:	90 0d       	add	r25, r0
    1c9a:	b4 9f       	mul	r27, r20
    1c9c:	90 0d       	add	r25, r0
    1c9e:	a4 9f       	mul	r26, r20
    1ca0:	80 0d       	add	r24, r0
    1ca2:	91 1d       	adc	r25, r1
    1ca4:	11 24       	eor	r1, r1
    1ca6:	08 95       	ret

00001ca8 <__mulshisi3>:
    1ca8:	b7 ff       	sbrs	r27, 7
    1caa:	f4 cf       	rjmp	.-24     	; 0x1c94 <__muluhisi3>

00001cac <__mulohisi3>:
    1cac:	f3 df       	rcall	.-26     	; 0x1c94 <__muluhisi3>
    1cae:	82 1b       	sub	r24, r18
    1cb0:	93 0b       	sbc	r25, r19
    1cb2:	08 95       	ret

00001cb4 <__umulhisi3>:
    1cb4:	a2 9f       	mul	r26, r18
    1cb6:	b0 01       	movw	r22, r0
    1cb8:	b3 9f       	mul	r27, r19
    1cba:	c0 01       	movw	r24, r0
    1cbc:	a3 9f       	mul	r26, r19
    1cbe:	70 0d       	add	r23, r0
    1cc0:	81 1d       	adc	r24, r1
    1cc2:	11 24       	eor	r1, r1
    1cc4:	91 1d       	adc	r25, r1
    1cc6:	b2 9f       	mul	r27, r18
    1cc8:	70 0d       	add	r23, r0
    1cca:	81 1d       	adc	r24, r1
    1ccc:	11 24       	eor	r1, r1
    1cce:	91 1d       	adc	r25, r1
    1cd0:	08 95       	ret

00001cd2 <_exit>:
    1cd2:	f8 94       	cli

00001cd4 <__stop_program>:
    1cd4:	ff cf       	rjmp	.-2      	; 0x1cd4 <__stop_program>
